#!/usr/bin/php
<?php
/*
  vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4:
  Codificación: UTF-8
  +----------------------------------------------------------------------+
  | Elastix version 2.0                                                  |
  | http://www.elastix.org                                               |
  +----------------------------------------------------------------------+
  | Copyright (c) 2006 Palosanto Solutions S. A.                         |
  +----------------------------------------------------------------------+
  | Cdla. Nueva Kennedy Calle E 222 y 9na. Este                          |
  | Telfs. 2283-268, 2294-440, 2284-356                                  |
  | Guayaquil - Ecuador                                                  |
  | http://www.palosanto.com                                             |
  +----------------------------------------------------------------------+
  | The contents of this file are subject to the General Public License  |
  | (GPL) Version 2 (the "License"); you may not use this file except in |
  | compliance with the License. You may obtain a copy of the License at |
  | http://www.opensource.org/licenses/gpl-license.php                   |
  |                                                                      |
  | Software distributed under the License is distributed on an "AS IS"  |
  | basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See  |
  | the License for the specific language governing rights and           |
  | limitations under the License.                                       |
  +----------------------------------------------------------------------+
  | The Original Code is: Elastix Open Source.                           |
  | The Initial Developer of the Original Code is PaloSanto Solutions    |
  +----------------------------------------------------------------------+
  $Id: asteriskconfig,v 1.1 2007/01/09 23:49:36 alex Exp $
*/

ini_set('include_path', '/var/www/html:'.ini_get('include_path'));

include_once "/var/www/html/libs/misc.lib.php";
include_once "/var/www/html/configs/default.conf.php";

require_once 'Console/Getopt.php';
require_once "/var/www/html/libs/paloSantoPBX.class.php";
require_once "/var/www/html/libs/paloSantoAsteriskConfig.class.php";
require_once "/var/www/html/libs/paloSantoOrganization.class.php";
require_once "/var/www/html/modules/queues/libs/paloSantoQueues.class.php";
require_once "/var/www/html/modules/ivr/libs/paloSantoIVR.class.php";
require_once "/var/www/html/modules/inbound_route/libs/paloSantoInbound.class.php";
require_once "/var/www/html/modules/outbound_route/libs/paloSantoOutbound.class.php";
require_once "/var/www/html/modules/ring_group/libs/paloSantoRG.class.php";
require_once "/var/www/html/modules/time_conditions/libs/paloSantoTC.class.php";
require_once "/var/www/html/modules/conference/libs/paloSantoConference.class.php";

if(!isset($argv[1]))
    exit(1);
    
switch($argv[1]){
	case "dialplan-reload":
        exit(dialplanReload() ? 0 : 1);
		break;
	case "reload":
        exit(reload() ? 0 : 1);
		break;
    case "createDirOrganization":
        if(isset($argv[2])){
            exit(createDirOrganization($argv[2]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createExtensionFile":
        if(isset($argv[2]) && isset($argv[3])){
            exit(createExtensionFile($argv[2],$argv[3]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createExtensionGlobals":
        if(isset($argv[2]) && isset($argv[3])){
            exit(createExtensionGlobals($argv[2],$argv[3]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createFeaturesFile":
        exit(createFeaturesFile() ? 0 : 1);
        break; 
    case "generateDialPlan":
        if(isset($argv[2])){
            exit(generateDialPlan($argv[2],$argv[3]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createExtAddtionals":
        if(isset($argv[2])){
            exit(createExtAddtionals($argv[2]) ? 0 : 1);
        }else
            exit(createExtAddtionals() ? 0 : 1);
        break;
    case "createFileDahdiChannelAdd":
        if(isset($argv[2])){
            exit(createFileDahdiChannelAdd($argv[2]) ? 0 : 1);
        }else
            exit(createFileDahdiChannelAdd() ? 0 : 1);
        break;
    case "createExtGeneral":
        exit(createExtGeneral() ? 0 : 1);
        break;
    case "createExtAddtionals":
        if(isset($argv[2])){
            exit(createExtAddtionals($argv[2]) ? 0 : 1);
        }else
            exit(createExtAddtionals() ? 0 : 1);
        break;
    case "writeTechRegister":
        if(isset($argv[2])){
            exit(writeTechRegister($argv[2]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "deleteFileOrgAst":
        if(isset($argv[2])){
            exit(deleteFileOrgAst($argv[2]) ? 0 : 1);
        }else
            exit(deleteFileOrgAst() ? 0 : 1);
        break;
    case "createMoHDir":
        if(isset($argv[2])){
            exit(createMoHDir($argv[2],$argv[3]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "deleteFolderOrganization":
        if(isset($argv[2])){
            exit(deleteFolderOrganization($argv[2]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
	default:
		error_exit("No action specified \n");
		break;
}

function error_exit($sMsg, $errorcode = 1)
{
    fwrite(STDERR, $sMsg);
    exit($errorcode);
}

function changeFilePermission($file)
{
	chown($file,"asterisk");
	chgrp($file,"asterisk");
	exec("chmod 664 $file 2>&1",$output, $ret);
	return true;
}

function reload(){
    $ret = $output = null;
	exec("/usr/sbin/asterisk -r -x 'core reload' 2>&1",$output,$ret);
	if($ret!=0){
        fwrite(STDERR, "Asterisk couldn't be reloaded. ".implode('', $output)).".\n";
        return false;
	}
	return true;
}

function dialplanReload(){
    $ret = $output = null;
	exec("/usr/sbin/asterisk -r -x 'dialplan reload' 2>&1",$output,$ret);
	if($ret!=0){
        fwrite(STDERR, "Couldn't be reloaded asterisk dialplan. ".implode('', $output)).".\n";
        return false;
    }
    return true;
}


/**
    funcion usada para eliminar los archivos de configuracion
    de asterisk de una organizacion dentro del servidor elastix
    @param string domain -> dominio de la organizacion de la queç
                            se van a eliminar los archivos
*/
function deleteFileOrgAst($domain){
    if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $domain)){
        fprintf(STDERR, "Invalid domain format");
        return false;
    }
    
    $date=date("YMd_His");
    $path="/etc/asterisk/organizations/";
    $arrayFile=array("extensions_$domain.conf","extensions_additionals_$domain.conf","extensions_globals_$domain.conf","extensions_custom_$domain.conf");
    
    foreach($arrayFile as $file){
        if(file_exists($path.$file)){
            if(unlink($path.$file)===false){
                fprintf(STDERR, "File %s couldn't be deleted",$file);
                return false;
            }
        }
    }
    
    return true;
}

/*
    Esta funcion eliminara toda la informacion de una organizacion
    dentro del servidor. Usese con cuidado. 
    Esta funcion asume que la organizacion ya ha sido borrada de la 
    base de datos (tabla organization)
    @param $idcode string codigo unico dentro del sistema d ela organizacion
*/
function deleteFolderOrganization($idcode){
    if(!preg_match("/^[[:alnum:]]+$/",$idcode)){
         error_exit("ERR: Invalid Organization.\n");
    }

    $pathlib="/var/lib/asterisk/";
    $pathspool="/var/spool/asterisk/";
    $pathelxdir="/var/www/elastixdir/";
    
    $arrDir[] = array($pathspool."monitor/",false,"monitor"); //grabaciones llamadas 
    $arrDir[] = array($pathspool."meetme/",false,"meetme"); //grabaciones llamadas meetme
    $arrDir[] = array($pathspool."tmp/",false,"tmp");
    $arrDir[] = array($pathlib."sounds/",true,"sounds"); //recordings
    $arrDir[] = array($pathlib."moh/",true,"moh"); //musica en espera
    
    $arrDir[]=array($pathelxdir."faxdocs/",true,"faxdocs"); //faxes recibidos y enviados
    $arrDir[]=array($pathelxdir."backup/",true,"backup"); //backup del sistema
    
    //TODO: antiguo directorio de faxes. Esto debe ser borrado
    //luego que se actualiace el modulo fax para que los faxes enviados 
    //y recibidos queden bajo el directorio /var/www/elastixdir/faxdocs
    $arrDir[]=array("/var/www/faxes/",true,"faxes");
    
    try{
        $conn = new PDO('sqlite:/var/www/db/elastix.db');
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        //obtenemos los datos de la organizacion eliminada de la tabla org_history_register
        $sOrgData = $conn->prepare('SELECT org_code,org_domain FROM org_history_register WHERE org_idcode = ?');
        $sOrgData->execute(array($idcode));
        $orgData = $sOrgData->fetchAll(PDO::FETCH_ASSOC);
        if($orgData==false)
            error_exit("Err: Couldn't get information about organization with idcode: ").$idcode;
        
        $code=$orgData[0]["org_code"];
        $domain=$orgData[0]["org_domain"];
        
        //comprobamos que la organizacion ya haya sido borrada de la base
        $sOrgExist = $conn->prepare("SELECT 1 from organization where idcode=?");
        $sOrgExist->execute(array($idcode));
        $orgExist = $sOrgExist->fetchAll(PDO::FETCH_ASSOC);
        if(count($orgExist)!=0)
            error_exit("Err: Organization exist yet. Domain: ").$domain;
    }catch(PDOException $e){
        error_exit("ERR: failed to delete organization data in Elastix - ".$e->getMessage()."\n");
    }
    
    $error="";
    //carpeta que contendra la data de la organizacion que no pueda ser eliminada
    $repOrg=$pathelxdir."oldOrganizations/$idcode";
    if(!is_dir($pathelxdir."oldOrganizations")){
        mkdir($pathelxdir."oldOrganizations");
        exec("chmod 755 $pathelxdir"."oldOrganizations");
    }else{
        //comprobamos permisos de escritura del directorio
        if(!is_writable($pathelxdir."oldOrganizations")){
            exec("chmod 755 $pathelxdir"."oldOrganizations");
        }
    }
    if(!is_dir($repOrg)){
        mkdir($repOrg);
        exec("chmod 755 $repOrg");
    }
    
    foreach($arrDir as $value){
        if(is_dir($value["0"].$domain)){
            if(!_delTree($value["0"].$domain,$value["1"])){
                rename($value["0"].$domain,"$repOrg/$value[2]_$domain");
                $error="\nFailed to delete: ".$value["0"].$domain;
            }
        }
    }
    
    //borramos los voicemail de la organizacion
    $vmdirs = glob($pathspool."voicemail/$code*");
    foreach($vmdirs as $file){
        if(!_delTree($file,true)){
            if(!is_dir("$repOrg/voicemail"))
                mkdir("$repOrg/voicemail");
            $nfile=strpos($pathspool."voicemail",$file);
            $error .="\nFailed to delete voicemail directory: $file";
            
            if(!rename($file,"$repOrg/voicemail/$nfile"))
                $error .="\nFailed to move voicemail directory: $file";
        }
    }
    
    if($error=="" && is_dir($repOrg)){
        rmdir($repOrg);
    }
    
    if($error!=""){
        return false;
    }else
        return true;
}

//funcion que elimina un directorio y su contenido
//@param dir string  nombre del directorio a aliminar
//@param $callback  bool  si es verdadero la funcion eliminara 
//                         el directorio a pesar de que este tenga otros 
//                         directorios en su interior
function _delTree($dir,$callback=false) {
    $files = array_diff(scandir($dir), array('.','..')); 
    foreach ($files as $file) {
        if(is_dir("$dir/$file")){
            print("$dir/$file");
            if($callback)
                _delTree("$dir/$file",$callback);
        }else{
            unlink("$dir/$file");
        }
    } 
    return rmdir($dir); 
}

function createMoHDir($class,$domain=null){
    if(!preg_match('/^([[:alnum:]]|-|_)+$/', "$class")){
        fprintf(STDERR,"Invalid Class name MoH");
        return false;
    }
    
    if(isset($domain)){
        if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $domain)){
            fprintf(STDERR, "Invalid domain format");
            return false;
        }
        $base="/var/lib/asterisk/moh/".$domain;
    }else{
        $base="/var/lib/asterisk/mohmp3";
    }
    
    if(!is_dir($base)){
        if(mkdir($base,0755)){
            chown($base,"asterisk");
            chgrp($base,"asterisk");
        }else{
            fprintf(STDERR, "ERR: failed to create '%s' directory",$base);
            return false;
        }
    }
    
    if(!is_dir($base."/$class")){
        if(mkdir($base."/$class",0755)){
            chown($base."/$class","asterisk");
            chgrp($base."/$class","asterisk");
        }else{
            fprintf(STDERR, "ERR: failed to create '%s' directory",$base."/$class");
            return false;
        }
    }else{
        chown($base."/$class","asterisk");
        chgrp($base."/$class","asterisk");
    }
        
    return true;
}

function createDirOrganization($domain){
    $pathDial="/etc/asterisk/organizations";
    $exito=true;
    
    if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $domain)){
        fprintf(STDERR, "Invalid domain format");
        return false;
    }
    
    if(!is_dir($pathDial)){
        if(mkdir($pathDial)){
            exec("chown asterisk.asterisk $path",$output,$retval);
            exec("chmod 775 $path",$output,$retval);
        }else{
            fprintf(STDERR, "ERR: failed to create '/etc/asterisk/organizations' directory");
            return false;
        }
    }
    
    $pathlib="/var/lib/asterisk";
    $pathspool="/var/spool/asterisk";

    $astmonitor = $pathspool."/monitor";
    $astmeetme = $pathspool."/meetme";
    $astspooltmp = $pathspool."/tmp";
    $astlibsound = $pathlib."/sounds";
    
    $arrDir=array($astmonitor,$astmeetme,$astlibsound,$astspooltmp);
    $date=date("YMd_His");
    foreach($arrDir as $dir){
        if(is_dir("$dir/$domain")){
            rename("$dir/$domain","$dir/$domain"."_".$date);
        }
        
        if(mkdir("$dir/$domain")){
            exec("chown asterisk.asterisk $dir/$domain ",$output,$retval);
            exec("chmod 775 $dir/$domain",$output,$retval);
        }else{
            fprintf(STDERR, "ERR: failed to create $dir/$domain directory - %s\n", $output[0]);
            $exito=false;
            break;
        }
    }

    if(!$exito){
        foreach($arrDir as $dir){
            if(is_dir("$dir/$domain"))
                rmdir("$dir/$domain");
        }
        return false;
    }else{
        return true;
    }
}

function createExtensionFile($action,$orgdomain){
    $EXITO=false;
    $file="/etc/asterisk/extensions.conf";
    
    $content = <<<EXTENSIONS_CONFIG
[default]
exten => s,1,Playback(vm-goodbye)
exten => h,1,Hangup()

EXTENSIONS_CONFIG;
    
    $pDB=new paloDB("sqlite3:////var/www/db/elastix.db");
    $query="Select domain from organization where state=?";
    $result=$pDB->fetchTable($query,false,array("active"));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection elastix.db - %s\n", $pDB->errMsg);
        return false;
    }
       
    $arrDomain=array();
    foreach($result as $domain)
    {
        $arrDomain[]=$domain[0];
    }
    
    if($action=="add" || $action=="delete"){
        if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $orgdomain)){
            fprintf(STDERR, "Invalid domain format");
            return false;
        }
    }
    
    if($action=="add"){
        if(in_array($orgdomain,$arrDomain)===false){
            $arrDomain[]=$orgdomain;
        }
    }elseif($action=="delete"){
        $index=array_search($orgdomain,$arrDomain);
        if($index!==false){    
            $arrDomain[$index]=null;
        }
    }
    
    $content .="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
    
    if(!is_file("/etc/asterisk/extensions_custom.conf")){
        if(file_put_contents("/etc/asterisk/extensions_custom.conf","")!==false){
            $content .="#include extensions_custom.conf\n";
            changeFilePermission("/etc/asterisk/extensions_custom.conf");
        }
    }else
        $content .="#include extensions_custom.conf\n";
        
    $content .="#include extensions_globals.conf\n";
    
    if(!is_file("/etc/asterisk/extensions_general.conf")){
        if(createExtGeneral()!==false){
            $content .="#include extensions_general.conf\n";
        }
    }else
        $content .="#include extensions_general.conf\n";
        
    foreach($arrDomain as $value){
        if(!empty($value)){
            if(!is_file("/etc/asterisk/organizations/extensions_".$value.".conf")){
                if(file_put_contents("/etc/asterisk/organizations/extensions_".$value.".conf","")!==false){
                    $content .="#include organizations/extensions_".$value.".conf\n";
                    changeFilePermission("/etc/asterisk/organizations/extensions_".$value.".conf");
                }
            }else{
                $content .="#include organizations/extensions_".$value.".conf\n";
            }
        }
    }
    $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        
    if(file_put_contents($file, $content)!==false){
        changeFilePermission($file);
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    }   
}

function createExtensionGlobals($action,$orgdomain){
    $EXITO=false;
    $file="/etc/asterisk/extensions.conf";
    
    $content = "";
    
    $pDB=new paloDB("sqlite3:////var/www/db/elastix.db");
    $query="Select domain from organization where state=?";
    $result=$pDB->fetchTable($query,false,array("active"));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection elastix.db - %s\n", $pDB->errMsg);
        return false;
    }
    
    $arrDomain=array();
    foreach($result as $domain){
        $arrDomain[]=$domain[0];
    }
    
    if($action=="add" || $action=="delete"){
        if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $orgdomain)){
            fprintf(STDERR, "Invalid domain format");
            return false;
        }
    }
    
    if($action=="add"){
        if(in_array($orgdomain,$arrDomain)===false){
            $arrDomain[]=$orgdomain;
        }
    }elseif($action=="delete"){
        $index=array_search($orgdomain,$arrDomain);
        if($index!==false){    
            $arrDomain[$index]=null;
        }
    }

    $file="/etc/asterisk/extensions_globals.conf";
    $source_file="/var/www/elastixdir/asteriskconf/elastix_pbx.conf";
    $content ="[globals]\n";
    if(is_file($source_file)){
        if($handler=fopen($source_file,'r')){
            $content .= fread($handler, filesize($source_file));
        } 
    }else{
        fprintf(STDERR, "File /var/www/elastixdir/asteriskconf/elastix_pbx.conf dosen't exist\n");
        $content ="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        file_put_contents($file, $content);
        return false;
    }
    
    if(count($arrDomain)!=0){
        $content .="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        foreach($arrDomain as $value)
        {
            if(!empty($value)){
                //antes de incluir el archivo validamos que el mismo exista
                //ya que si no existe y lo incluimos esto provocara que asterisk crash
                //en caso de no existir el archivo se lo inteta crear
                if(!is_file("/etc/asterisk/organizations/extensions_globals_".$value.".conf")){
                    if(file_put_contents("/etc/asterisk/organizations/extensions_globals_".$value.".conf","")!==false){
                        $content .="#include organizations/extensions_globals_".$value.".conf\n";
                        changeFilePermission("/etc/asterisk/organizations/extensions_globals_".$value.".conf");
                    }
                }else
                    $content .="#include organizations/extensions_globals_".$value.".conf\n";
            }
        }
        $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";  
    }else{
        $content .="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
    }
    
    if(file_put_contents($file, $content)!==false){
        changeFilePermission($file);
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    } 
}

function createExtensionDomainFile($domain,$code){
    $EXITO=false;
    $fsource="/var/www/elastixdir/asteriskconf/generic_extensions.conf";
    $extFile="/etc/asterisk/organizations/extensions_$domain.conf";
    $extAddFile="/etc/asterisk/organizations/extensions_additionals_$domain.conf";
    $extCusFile="/etc/asterisk/organizations/extensions_custom_$domain.conf";
    $extGlobalFile="/etc/asterisk/organizations/extensions_globals_$domain.conf";
    if(is_file($fsource)){
        if($handler=fopen($fsource,'r')){
            $content = fread($handler, filesize($fsource));
            $content = str_replace("{CODE}", "$code", $content);
            $content = str_replace("{DOMAIN}", "$domain", $content);
            fclose($handler);
            
            if(file_put_contents($extFile, $content)!==false){
                changeFilePermission($extFile);
            }else{
                fprintf(STDERR, "ERR: File $extFile couldn't be written");
                return false;
            }  
            
            $content="";
            foreach(array($extAddFile,$extCusFile,$extGlobalFile) as $file){
                if(is_file($file)===false){
                    if(file_put_contents($file, $content)!==false){
                        changeFilePermission($file);
                    }else{
                        fprintf(STDERR, "ERR: File $file couldn't be written");
                        return false;
                    }    
                }
            }
            $EXITO=true;
        }else{
            fprintf(STDERR, "ERR: Couldn't be opened for reading file - %s\n", $fsource);
        }
    }else{
        fprintf(STDERR, "ERR: File extensions_generic.conf doesn't exist, new fiel couldn't be created - %s\n", $output[0]);
    }
    return $EXITO;
}

function createExtensionGlobalsDomainFile($domain,$code){
    $file="/etc/asterisk/organizations/extensions_globals_$domain.conf";
    $contenido="";
            
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    //leemos todas las variables globales de la organizacion desde la tabla globals
    $query="SELECT variable,value from globals where organization_domain=?";
    $result=$pDB->fetchTable($query,false,array($domain));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection elxppbx - %s\n", $pDB->errMsg);
        return false;
    }elseif(count($result)!=0){
        $contenido = "[globals](+)\n"; //no quitar (+), esto permite escribir un mismo contexto en distintos archivos
        foreach($result as $arrtemp){
            if($arrtemp[0]!="CREATE_VM")
                $contenido .=$code."_$arrtemp[0]=$arrtemp[1]\n";
        }
    }

    if(file_put_contents($file, $contenido)!==false){
        changeFilePermission($file);
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    } 
}

function generateDialPlan($domain,$reload=false){
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    $pDBSQLITE=new paloDB("sqlite3:////var/www/db/elastix.db");
    
    if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $domain)){
        fprintf(STDERR, "Invalid domain format");
        return false;
    }
    
    //valido que exista el dominio y obtengo el code asociado a este
    $queryCode="SELECT code from organization where domain=?";
    $resultc=$pDBSQLITE->getFirstRowQuery($queryCode, false, array($domain));
    if($resultc===false){
        fprintf(STDERR, "ERR: Database connection elastix.db - %s\n", $pDBSQLITE->errMsg);
        return false;
    }elseif(count($resultc)==0){
        fprintf(STDERR, "ERR: Organization dosen't exist\n");
        return false;
    }
    $code=$resultc[0];

    $file="/etc/asterisk/organizations/extensions_additionals_$domain.conf";

    $arrContext=array();
    $arrFromInt=array();
    
    //al momento de crear una organizacion no se escriben las variables globales de la misma
    //por lo que es necesario una vez que se mande a generar por primera vez el plan de marcado para
    //la misma hacer un reload para que las variables globales sean seteadas correctamente
    if(is_file("/etc/asterisk/organizations/extensions_globals_$domain.conf")===false || filesize("/etc/asterisk/organizations/extensions_globals_$domain.conf")==0){
        $reload=true;
    }
    
    //escribimos el archivos extensions_domain.conf
    if(createExtensionDomainFile($domain,$code)==false){
        fprintf(STDERR, "ERR: File extesions_$domain.conf couln't be written.\n");
        return false;
    }
    
    //escribir las variables globales
    if(createExtensionGlobalsDomainFile($domain,$code)==false){
        fprintf(STDERR, "ERR: Globlas variables couldn't be written.\n");
        return false;
    }
    
    //genero plan de marcado relacionado con los irvs
    $pIVR=new paloIvrPBX($pDB,$domain);
    $arrContextIVR=$pIVR->createDialPlanIvr($arrFromInt);
    if($arrContextIVR===false || !is_array($arrContextIVR))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pIVR->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextIVR);

    //genero plan de marcado relacionado a rutas de entrada
    $pInbound=new paloSantoInbound($pDB,$domain);
    $arrContextIN=$pInbound->createDialplanIndbound($arrFromInt);
    if($arrContextIN===false || !is_array($arrContextIN))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pInbound->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextIN);
        
     //genero plan de marcado relacionado a rutas de salida
    $pOutbound=new paloSantoOutbound($pDB,$domain);
    $arrContextOut=$pOutbound->createDialPlanOutbound($arrFromInt);
    if($arrContextOut===false || !is_array($arrContextOut))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pOutbound->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextOut);
    
    //genero el plan de marcado relacionado con las extension internas
    $pDevice=new paloDevice($domain,"sip",$pDB);
    $arrContextExtLocal=$pDevice->createDialPlanLocalExtension($arrFromInt);
    if($arrContextExtLocal===false || !is_array($arrContextExtLocal))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pDevice->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextExtLocal);

    //genero el plan de marcado de los faxes
    $arrContextExtFax=$pDevice->createDialPlanFaxExtension($arrFromInt);
    if($arrContextExtFax===false || !is_array($arrContextExtFax))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pDevice->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextExtFax);
        
    //genero plan de marcado relacionado con las colas
    $pQueue=new paloQueuePBX($pDB,$domain);
    $arrContextQueue=$pQueue->createDialPlanQueue($arrFromInt);
    if($arrContextQueue===false || !is_array($arrContextQueue))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pQueue->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextQueue);
        
    //genero plan de marcado relacionado con los ring-groups
    $pRG=new paloSantoRG($pDB,$domain);
    $arrRG=$pRG->createDialplanRG($arrFromInt);
    if($arrRG===false || !is_array($arrRG))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pRG->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrRG);
        
    //genero plan de marcado relacionado con los ring-groups
    $pConf=new paloConference($pDB,$domain);
    $arrConf=$pConf->createDialplanConf($arrFromInt);
    if($arrConf===false || !is_array($arrConf))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pConf->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrConf);

    //genero plan de marcado relacionado con los time_conditions
    $pTC=new paloSantoTC($pDB,$domain);
    $arrTC=$pTC->createDialplanTC($arrFromInt);
    if($arrTC===false || !is_array($arrTC))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pTC->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrTC);
        
    //genero el plan marcado relacionado con los features codes
    $pFC=new paloFeatureCodePBX($pDB,$domain);
    $arrContextFeaturesCode=$pFC->createDialPlanFeaturesCode($arrFromInt);
    if($arrContextFeaturesCode===false || !is_array($arrContextFeaturesCode))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pFC->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextFeaturesCode);
        
    //incluimos los contextos dentro de from-internal-additional
    $fromInternal=new paloContexto($code,"from-internal-additional");
    $fromInternal->arrInclude=$arrFromInt;
    $fromInternal->arrExtensions=array(new paloExtensions("h",new ext_hangup(),"1"));
    $arrContext[]=$fromInternal;

    $contenido="";
    
    foreach($arrContext as $value){
        if(isset($value)){
            if(empty($value->errMsg) && is_object($value)){
                $contenido .=$value->stringContexto($value->arrInclude,$value->arrExtensions);
            }else{
                fprintf(STDERR, "ERR: Error written dialplan - %s\n",$value->errMsg);
            }
        }
    }
       
    if(file_put_contents($file, $contenido)!==false){
        changeFilePermission($file);
        if($reload==true){
            if(reload()==false){
                return false;
            }
        }else{
            if(dialplanReload()==false){
                return false;
            }
        }
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    }
}

function createFeaturesFile(){
    $file="/etc/asterisk/features.conf";
    
    //si no existe el archivo features.conf este se crea
    if(is_file($file)===false){
            $contenido = <<<FEATURES_CONFIG
[general]
#include features_general.conf
#include features_general_custom.conf

[featuremap]
#include features_map.conf
#include features_map_custom.conf

[applicationmap]
#include features_applicationmap.conf
#include features_applicationmap_custom.conf
FEATURES_CONFIG;

    if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    
    if(createFeatureMapfile()){
        if(createFeatureGeneralfile())
            return createFeatureApplicationMapfile();
        else
            return false;
    }else
        return false;
}

function createFeatureMapfile(){
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    
    $contenido="";
    $file="/etc/asterisk/features_map.conf";
    $query="Select name, default_code from features_code_settings where name=? or name=? or name=? or name=? and estado=?";
    $result=$pDB->fetchTable($query,true,array("blind_transfer","attended_transfer","one_touch_monitor","disconnect_call",'enabled'));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection globals_settings - %s\n", $pDB->errMsg);
        return false;
    }else{
        foreach($result as $value){
            switch ($value["name"]) {
                case "blind_transfer":
                    $feature="blindxfer";
                    break;
                case "attended_transfer":
                    $feature="atxfer";
                    break;
                case "one_touch_monitor":
                    $feature="automon";
                    break;
                case "disconnect_call":
                    $feature="disconnect";
                    break;
            }
            $contenido .= $feature."=".$value["default_code"]."\n";
        }
    }
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }
    
    $file="/etc/asterisk/features_map_custom.conf";
    $contenido="";
    if(is_file($file)===false){
        if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    
    return true;
}

//TODO
//falta ver que se va ha hacer con el asunto de la llamadas parqueadas
//en caso de existir debe definirse aqui el numero de la estension
function createFeatureGeneralfile(){
    $file="/etc/asterisk/features_general.conf";
    $contenido="";
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }
    
    $file="/etc/asterisk/features_general_custom.conf";
    $contenido="";
    if(is_file($file)===false){
        if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    return true;
}

//TODO
function createFeatureApplicationMapfile(){
    $file="/etc/asterisk/features_applicationmap.conf";
    $contenido="";
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }
    
    $file="/etc/asterisk/features_applicationmap_custom.conf";
    $contenido="";
    if(is_file($file)===false){
        if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    return true;
}

/**
    funcion que escribe el archivo extensions_general.conf
    ese archivo contiene el contexto from-pstn. Con ese contexto
    es posible redirigir las llamadas a la organizacion con el correspondiente
    did. Este archivo es incluido dentro del archivo extensions.conf
    dentro de este archivo se encuentra tambien los patrones de marcado de las 
    truncales en caso de que existan
*/
function createExtGeneral(){
    $file="/etc/asterisk/extensions_general.conf";
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    
    $contenido="\n[from-pstn]\n";
    $contenido .="include =>from-pstn-custom\n";
    $contenido .="include =>ext-did\n";
    $contenido .="include =>ext-did-catchall\n";
    
    /*
    //This dialplan is generated in base to dialplan generated by freepbx
    ;-------------------------------------------------------------------------------
    ; from-pstn-e164-us:
    ;
    ; The context is designed for providers who send calls in e164 format and is
    ; biased towards NPA calls, callerid and dialing rules. It will do the following:
    ;
    ;  DIDs in an NPA e164 format of +1NXXNXXXXXX will be converted to 10 digit DIDs
    ;
    ;  DIDs in any other format will be delivered as they are, including e164 non NPA
    ;  DIDs which means they will need the full format including the + in the inbound
    ;  route.
    ;
    ;  CallerID(number) presented in e164 NPA format will be trimmed to a 10 digit CID
    ;
    ;  CallerID(number) presented in e164 non-NPA (country code other than 1) will be
    ;  reformated from: +<CountryCode><Number> to 011<CountryCode><Number>
    ;
    [from-pstn-e164-us]
    exten => _+1NXXNXXXXXX/_+1NXXNXXXXXX,1,Set(CALLERID(number)=${CALLERID(number):2})
    exten => _+1NXXNXXXXXX/_NXXNXXXXXX,2,Goto(from-pstn,${EXTEN:2},1)
    exten => _+1NXXNXXXXXX/_+X.,1,Set(CALLERID(number)=011${CALLERID(number):1})
    exten => _+1NXXNXXXXXX/_011X.,n,Goto(from-pstn,${EXTEN:2},1)
    exten => _+1NXXNXXXXXX,1,Goto(from-pstn,${EXTEN:2},1)
    exten => _[0-9+]./_+1NXXNXXXXXX,1,Set(CALLERID(number)=${CALLERID(number):2})
    exten => _[0-9+]./_NXXNXXXXXX,n,Goto(from-pstn,${EXTEN},1)
    exten => _[0-9+]./_+X.,1,Set(CALLERID(number)=011${CALLERID(number):1})
    exten => _[0-9+]./_011X.,n,Goto(from-pstn,${EXTEN},1)
    exten => _[0-9+].,1,Goto(from-pstn,${EXTEN},1)
    exten => s/_+1NXXNXXXXXX,1,Set(CALLERID(number)=${CALLERID(number):2})
    exten => s/_NXXNXXXXXX,n,Goto(from-pstn,${EXTEN},1)
    exten => s/_+X.,1,Set(CALLERID(number)=011${CALLERID(number):1})
    exten => s/_011X.,n,Goto(from-pstn,${EXTEN},1)
    exten => s,1,Goto(from-pstn,${EXTEN},1)
     ;-------------------------------------------------------------------------------*/
    $arrExt=array();
    $arrExt[]=new paloExtensions("_+1NXXNXXXXXX/_+1NXXNXXXXXX",new ext_set('CALLERID(number)','${CALLERID(number):2}'),1);
    $arrExt[]=new paloExtensions("_+1NXXNXXXXXX/_NXXNXXXXXX",new ext_goto('1','${EXTEN:2}',"from-pstn"),2);
    $arrExt[]=new paloExtensions("_+1NXXNXXXXXX/_+X.",new ext_set('CALLERID(number)','011${CALLERID(number):1}'),"1");
    $arrExt[]=new paloExtensions("_+1NXXNXXXXXX/_011X.",new ext_goto('1','${EXTEN:2}',"from-pstn"));
    $arrExt[]=new paloExtensions("_+1NXXNXXXXXX",new ext_goto('1','${EXTEN:2}',"from-pstn"),1);
    $arrExt[]=new paloExtensions("_[0-9+]./_+1NXXNXXXXXX",new ext_set('CALLERID(number)','${CALLERID(number):2}'),1);
    $arrExt[]=new paloExtensions("_[0-9+]./_NXXNXXXXXX",new ext_goto('1','${EXTEN}',"from-pstn"));
    $arrExt[]=new paloExtensions("_[0-9+]./_+X.",new ext_set('CALLERID(number)','011${CALLERID(number):1}'),"1");
    $arrExt[]=new paloExtensions("_[0-9+]./_011X.",new ext_goto('1','${EXTEN}',"from-pstn"));
    $arrExt[]=new paloExtensions("_[0-9+].",new ext_goto('1','${EXTEN}',"from-pstn"),1);
    $arrExt[]=new paloExtensions("s/_+1NXXNXXXXXX",new ext_set('CALLERID(number)','${CALLERID(number):2}'),1);
    $arrExt[]=new paloExtensions("s/_NXXNXXXXXX",new ext_goto('1','${EXTEN}',"from-pstn"));
    $arrExt[]=new paloExtensions("s/_+X.",new ext_set('CALLERID(number)','011${CALLERID(number):1}'),1);
    $arrExt[]=new paloExtensions("s/_011X.",new ext_goto('1','${EXTEN}',"from-pstn"));
    $arrExt[]=new paloExtensions("s",new ext_goto('1','${EXTEN}',"from-pstn"),1);
    $contenido .="\n[from-pstn-e164-us]\n";
    $contenido .="include =>from-pstn-e164-us-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    

/*  ;-------------------------------------------------------------------------------
    ; from-pstn-to-did
    ;
    ; The context is designed for providers who send the DID in the TO: SIP header
    ; only. The format of this header is:
    ;
    ; To: <sip:2125551212@172.31.74.25>
    ;
    ; So the DID must be extracted between the sip: and the @, which this does
    ;
    [from-pstn-toheader]
    exten => _.,1,Goto(from-pstn,${CUT(CUT(SIP_HEADER(To),@,1),:,2)},1)
    ;-------------------------------------------------------------------------------
    */
    $arrExt=array();
    $arrExt[]=new paloExtensions("_.",new ext_goto('1','${CUT(CUT(SIP_HEADER(To),@,1),:,2)}',"from-pstn"),1);
    $contenido .="\n[from-pstn-to-did]\n";
    $contenido .="include =>from-pstn-to-did-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    $arrExt=array();
    $arrExt[]=new paloExtensions("_X.",new ext_set('ORG_CODE',''),"1");
    $arrExt[]=new paloExtensions("_X.",new ext_set('ORG_DOMAIN',''));
    $arrExt[]=new paloExtensions("_X.",new ext_set('ARRAY(ORG_CODE,__ORG_DOMAIN)','${DID_EXISTDID(${EXTEN})}'));
    $arrExt[]=new paloExtensions("_X.",new ext_gotoif('$["${ORG_CODE}"=""]','ext-did-catchall,s,1'));
    $arrExt[]=new paloExtensions("_X.",new ext_noop('Reciving call to organization with domain ${ORG_DOMAIN}'));
    $arrExt[]=new paloExtensions("_X.",new ext_set('CDR(fromout)','1'));
    
    $arrExt[]=new paloExtensions("_X.",new ext_set('CDR(organization_domain)','${ORG_DOMAIN}'));
    $arrExt[]=new paloExtensions("_X.",new ext_goto("1",'${EXTEN}','${ORG_CODE}-from-pstn'));
    $arrExt[]=new paloExtensions("_X.",new ext_macro('${ORG_CODE}-Hangupcall'));
    $contenido .="\n[ext-did]\n";
    $contenido .="include =>ext-did-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    //contexto ext-did-catchall
    $arrExt=array();
    $arrExt[]=new paloExtensions("s",new ext_noop('No DID or CID Match'),"1");
    $arrExt[]=new paloExtensions("s",new ext_answer(),"n","a2");
    $arrExt[]=new paloExtensions("s",new ext_wait(2));
    $arrExt[]=new paloExtensions("s",new ext_playback("ss-noservice"));
    $arrExt[]=new paloExtensions("s",new ext_sayalpha('${FROM_DID}'));
    $arrExt[]=new paloExtensions("s",new ext_hangup());
    $arrExt[]=new paloExtensions("_.",new ext_set('__FROM_DID','${EXTEN}'),1);
    $arrExt[]=new paloExtensions("_.",new ext_noop('Received an unknown call with DID set to ${EXTEN}'));
    $arrExt[]=new paloExtensions("_.",new ext_goto('a2','s'));
    $arrExt[]=new paloExtensions("h",new ext_hangup(),1);
    $contenido .="\n[ext-did-catchall]\n";
    $contenido .="include =>ext-did-catchall-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    // contexto salida-check
    // se creo para verificar que llamadas realizadas de una compañia a otra compañia
    // que pertenezcan al mismo servidor no salgan por la truncal
    // ${ARG1}=ORGANIZATION_CODE
    // ${ARG2}=ORGANIZATION_DOMAIN
    // ${ARG3}=DIAL_NUMBER ; numero a marcar por la truncal si añadir el OUTPREFIX
    // ${ARG4}=TRUNNK_CHANNEL ; 
    $arrExt=array();
    $arrExt[]=new paloExtensions("s",new ext_set('_REDIRECCIONAR',''),"1");
    $arrExt[]=new paloExtensions("s",new ext_set('ORG_CODE','${ARG1}'));
    $arrExt[]=new paloExtensions("s",new ext_set('_REDIRECCIONAR','${DID_INFODID(${ARG3},${ARG2})}')); 
    $arrExt[]=new paloExtensions("s",new ext_gotoif('$["${REDIRECCIONAR}" = "1"]','indial'));
    $arrExt[]=new paloExtensions("s",new ext_set('outtrunk','continue'));
    $arrExt[]=new paloExtensions("s",new ext_return('${outtrunk}'));
    // b options sera efectiva en asterisk 11
    $arrExt[]=new paloExtensions("s",new ext_dial('Local/${ARG3}@from-pstn/n','60,${DIAL_TRUNK_OPTIONS}f(${CALLERID(all)})'),"n","indial");
    $arrExt[]=new paloExtensions("s",new ext_noop('TRUNK Dialed with ${DIALSTATUS} HANGUPCAUSE: ${HANGUPCAUSE}'));
    $arrExt[]=new paloExtensions("s",new ext_hangup());
    $arrExt[]=new paloExtensions("h",new ext_macro('${ORG_CODE}-hangupcall'),"1");
    $contenido .="\n[salida-check]\n";
    $contenido .="include =>salida-check-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    // en asterisk 11 puede ser usado este contexto
    $arrExt=array();
    $arrExt[]=new paloExtensions("s",new ext_set('CDR(intraforward)','${ARG1}'),"1");
    $contenido .="\n[intraforward-call]\n";
    $contenido .="include =>intraforward-call-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    // contexto allow-out
    // este contexto se creo para aegurarnos que solos las organizaciones 
    // autorizadas por el superadmin podran realizar llamdas a traves de la 
    // truncal con el id pasado como parametro
    // ${ARG1}=ORGANIZATION_DOMAIN
    // ${ARG2}=TRUNK_ID
    $arrExt=array();
    $arrExt[]=new paloExtensions("s",new ext_noop('TRUNK ${OUT_${ARG2}} Organization: ${ARG1}'),"1");
    $arrExt[]=new paloExtensions("s",new ext_set('ORG_PERMIT',''));
    $arrExt[]=new paloExtensions("s",new ext_set('ORG_PERMIT','${TRUNK_INFOORG(${ARG1},${ARG2})}'));
    $arrExt[]=new paloExtensions("s",new ext_execif('$["${ORG_PERMIT}"!="1"]','Set','ORG_PERMIT=noallow'));
    $arrExt[]=new paloExtensions("s",new ext_return('${ORG_PERMIT}'));
    $contenido .="\n[allow-out]\n";
    $contenido .="include =>allow-out-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    //contexto from-analog
    //a este contexto llegan la llamadas provenientes de los puertos analogicos
    $arrExt=array();
    $arrExt[]=new paloExtensions("_X.",new ext_setvar("DID",'${EXTEN}'),"1");
    $arrExt[]=new paloExtensions("_X.",new ext_goto("1",'s'));
    $arrExt[]=new paloExtensions("s",new ext_noop('Entering from-analog with DID == ${DID}'),"1");
    $arrExt[]=new paloExtensions("s",new ext_ringing());
    $arrExt[]=new paloExtensions("s",new ext_setvar("DID",'${IF($["${DID}"= "]?s:${DID})}'));
    $arrExt[]=new paloExtensions("s",new ext_noop('DID is now ${DID}'));
    $arrExt[]=new paloExtensions("s",new ext_gotoif('$["${CHANNEL:0:5}"="DAHDI"]','dahdiok','checkzap'));
    $arrExt[]=new paloExtensions("s",new ext_gotoif('$["${CHANNEL:0:3}"="Zap"]','zapok','neither'),"n","checkzap");
    $arrExt[]=new paloExtensions("s",new ext_gosub(1,'${DID}'),"n","neither");
    $arrExt[]=new paloExtensions("s",new ext_hangup());
    $arrExt[]=new paloExtensions("s",new ext_noop('Is a DAHDI Channel'),"n","dahdiok");
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CHANNEL:6}'));
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CUT(CHAN,-,1)}'));
    $arrExt[]=new paloExtensions("s",new ext_macro('analog-did','${CHAN}'));
    $arrExt[]=new paloExtensions("s",new ext_noop('Returned from Macro analog-did'));
    $arrExt[]=new paloExtensions("s",new ext_goto(1,'${DID}',"from-pstn"));
    $arrExt[]=new paloExtensions("s",new ext_noop('Is a Zaptel Channel'),"n",'zapok');
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CHANNEL:4}'));
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CUT(CHAN,-,1)}'));
    $arrExt[]=new paloExtensions("s",new ext_macro('analog-did','${CHAN}'));
    $arrExt[]=new paloExtensions("s",new ext_noop('Returned from Macro analog-did'));
    $arrExt[]=new paloExtensions("s",new ext_goto(1,'${DID}',"from-pstn"));
    
    $contenido .="\n[from-analog]\n";
    $contenido .="include =>from-analog-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    // macro analog-did
    // este contexto se utiliza para setear un did a las llamadas provenientes desde puertos analogicos
    // en contexto de llegada de esos puertos debe ser from analog
    // ${ARG1}=PORT_ID
    $arrExt=array();
    $arrExt[]=new paloExtensions("s",new ext_noop('Entering to macro analog-did from port_id: ${ARG1} with DID : ${DID}'),"1");
    $arrExt[]=new paloExtensions("s",new ext_set('RETDID',''));
    $arrExt[]=new paloExtensions("s",new ext_set('RETDID','${DID_ANALOGDID(${ARG1},${ARG2})}'));
    $arrExt[]=new paloExtensions("s",new ext_execif('$["${RETDID}"=""]','MacroExit'));
    $arrExt[]=new paloExtensions("s",new ext_setvar("__FROM_DID",'${RETDID}'));
    $arrExt[]=new paloExtensions("s",new ext_goto("1",'${RETDID}','from-pstn'));
    $contenido .="\n[macro-analog-did]\n";
    $contenido .="include =>macro-analog-did-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    $TrunkPattern=createDialplanTrunkPattern();
    if($TrunkPattern!==false){
        $contenido .=$TrunkPattern;
    }
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }
    return true;
}

//esta funcion se usa para llamar a las funciones createExtGeneral
//y createFileDahdiChannelAdd en una misma funcion y no invocar a elastix helper dos veces
function createExtAddtionals($domain=null){
    if(createExtGeneral()==true)
        return createFileDahdiChannelAdd($domain);
    else
        return false;
}

function createFileDahdiChannelAdd($domain=null){
    $file="/etc/asterisk/chan_dahdi_additional.conf";
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    
    if(!is_null($domain)){
        if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $domain)){
            $domain=null;
        }
    }
    
    $pDBSQLITE=new paloDB("sqlite3:////var/www/db/elastix.db");
    //valido que exista el dominio y obtengo el code asociado a este
    $queryCode="SELECT code from organization where domain=?";
    
    //obtenemos los puertos que han sido asignados a un did y que pertencen a una organizacion
    $query="SELECT dd.did, dd.data, di.organization_domain from did_details dd join did di on dd.did=di.did where di.organization_domain IS NOT NULL and dd.keyword=? and di.type=?";
    $result=$pDB->fetchTable($query,true,array("port","analog"));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection did - %s.\n", $pDB->errMsg);
        fprintf(STDERR, "ERR: Couln't be rewritten file chan_dahdi_additional.conf.\n");
        return false;
    }
    
    $content="";
    
    if(is_file("/etc/asterisk/chan_dahdi_custom.conf")===false){
        if(file_put_contents("/etc/asterisk/chan_dahdi_custom.conf", "")!==false){
            $content .="#include chan_dahdi_custom.conf";
            changeFilePermission("/etc/asterisk/chan_dahdi_custom.conf");
        }
    }else
        $content .="#include chan_dahdi_custom.conf\n";
        
    foreach($result as $value){
        if(!empty($value["organization_domain"])){
            if($value["organization_domain"]!=$domain){
                $resultc=$pDBSQLITE->getFirstRowQuery($queryCode, true, array($value["organization_domain"]));
                if($resultc!=false){
                    $content .="context=from-analog\n";
                    $content .="channel => ".$value["data"]."\n";
                }
            }
        }
    }
    
    if(file_put_contents("$file", $content)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
        $ret = $output = null;
        exec("/usr/sbin/asterisk -r -x 'module reload chan_dahdi.so' 2>&1",$output,$ret);
        if($ret!=0){
            fwrite(STDERR, "Couldn't be reloaded module chan_dahdi.so. ".implode('', $output));
            return false;
        }
    }     
    
    return true;
}

function writeTechRegister($tech){
    if($tech=="sip" or $tech=="iax2"){
        if($tech=="sip"){
            $file="sip_register.conf";
            $mode="chan_sip.so";
        }else{
            $file="iax_register.conf";
            $mode="chan_iax2.so";
        }
            
        $query="SELECT tech,string_register from trunk where tech=?";
        $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
        $result=$pDB->fetchTable($query,true,array($tech));
        if($result===false){
            fprintf(STDERR, "ERR: Couldn't be written file - '/etc/asterisk/$file'. %s\n",$pDB->errMsg);
            return false;
        }
        
        $content="\n";
        //obtenemos los string de conneccion de las truncales
        foreach($result as $value){
            if(!empty($value["string_register"])){
                $content .="register => ".$value["string_register"]."\n";
            }
        }
        
        if(file_put_contents("/etc/asterisk/$file", $content)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - '/etc/asterisk/$file'\n");
            return false;
        }else{
            changeFilePermission("/etc/asterisk/$file");
        }
        
        $ret = $output = null;
        exec("/usr/sbin/asterisk -r -x 'module reload $mode' 2>&1",$output,$ret);
        if($ret!=0){
            fwrite(STDERR, "Couldn't be reloaded module $mode. ".implode('', $output));
            return false;
        }
    }
    return true;
}

function createDialplanTrunkPattern(){
    $arrExt=array();
    $exten="s";
    $prepend=$prefix=$pattern=$len="";
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    $query="SELECT * from trunk_dialpatterns order by trunkid";
    $result=$pDB->fetchTable($query,true);
    if($result===false){
        fprintf(STDERR, "ERR: Error getting trunk dialpatterns %s.\n",$pDB->errMsg);
        return false;
    }else{
        $trunkid="none";
        foreach($result as $value){
            $context="sub-flp-".$value["trunkid"];
            
            if(isset($value['prepend_digits']))
                $prepend=$value['prepend_digits'];
            if(isset($value['match_pattern_prefix'])){
                $prefix=strtoupper($value['match_pattern_prefix']);
                $len=($prefix=="")?"":":".strlen($prefix);
            }
            if(isset($value['match_pattern_pass'])){
                if($value['match_pattern_pass']=="")
                    $pattern=".";
                else
                    $pattern=strtoupper($value['match_pattern_pass']);
            }
                
            $expression = str_replace(
                array('X','Z','N','.','*','+'),
                array('[0-9]','[1-9]','[2-9]','[0-9#*\\\$]$','\\\*','\\\$'),
                $prefix.$pattern);
            $expression = strtr($expression,"$","+");
            
            if($trunkid!=$value["trunkid"]){
                $arrExt[$context][]=new paloExtensions($exten,new ext_set("NEW_DIAL_NUMBER",''),1);
            }
            
            if($prepend!="" || $prefix!=""){
                $arrExt[$context][]=new paloExtensions($exten,new ext_execif('$[${REGEX("^'.$expression.'$" ${DIAL_NUMBER})} = 1]','Set','NEW_DIAL_NUMBER='.$prepend.'${DIAL_NUMBER'.$len.'}'));
                $arrExt[$context][]=new paloExtensions($exten,new ext_gotoif('$[${LEN(${NEW_DIAL_NUMBER})} != 0]', 'match'));
            }
            $trunkid=$value["trunkid"];
        }
        
        $contenido="";
        foreach(array_keys($arrExt) as $name){
            $contenido .="\n[$name]\n";
            $arrExt[$name][]=new paloExtensions($exten,new ext_return(''));
            $arrExt[$name][]=new paloExtensions($exten,new ext_set('DIAL_NUMBER','${NEW_DIAL_NUMBER}'),"n","match");
            $arrExt[$name][]=new paloExtensions($exten,new ext_return(''));
            foreach($arrExt[$name] as $extension){
                if(!is_null($extension) && is_object($extension))
                    $contenido .=$extension->data."\n";
            }
        }
    }
    return $contenido;
}
?>