#!/usr/bin/php
<?php
/*
  vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4:
  CodificaciÃ³n: UTF-8
  +----------------------------------------------------------------------+
  | Elastix version 2.0                                                  |
  | http://www.elastix.org                                               |
  +----------------------------------------------------------------------+
  | Copyright (c) 2006 Palosanto Solutions S. A.                         |
  +----------------------------------------------------------------------+
  | Cdla. Nueva Kennedy Calle E 222 y 9na. Este                          |
  | Telfs. 2283-268, 2294-440, 2284-356                                  |
  | Guayaquil - Ecuador                                                  |
  | http://www.palosanto.com                                             |
  +----------------------------------------------------------------------+
  | The contents of this file are subject to the General Public License  |
  | (GPL) Version 2 (the "License"); you may not use this file except in |
  | compliance with the License. You may obtain a copy of the License at |
  | http://www.opensource.org/licenses/gpl-license.php                   |
  |                                                                      |
  | Software distributed under the License is distributed on an "AS IS"  |
  | basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See  |
  | the License for the specific language governing rights and           |
  | limitations under the License.                                       |
  +----------------------------------------------------------------------+
  | The Original Code is: Elastix Open Source.                           |
  | The Initial Developer of the Original Code is PaloSanto Solutions    |
  +----------------------------------------------------------------------+
  $Id: asteriskconfig,v 1.1 2007/01/09 23:49:36 alex Exp $
*/

include_once "/var/www/html/libs/misc.lib.php";
include_once "/var/www/html/configs/default.conf.php";

require_once 'Console/Getopt.php';
require_once "/var/www/html/libs/paloSantoPBX.class.php";
require_once "/var/www/html/libs/paloSantoAsteriskConfig.class.php";
require_once "/var/www/html/modules/queues/libs/paloSantoQueues.class.php";
require_once "/var/www/html/modules/ivr/libs/paloSantoIVR.class.php";
require_once "/var/www/html/modules/inbound_route/libs/paloSantoInbound.class.php";

if(!isset($argv[1]))
    exit(1);
    
switch($argv[1]){
	case "dialplan-reload":
        exit(dialplanReload() ? 0 : 1);
		break;
	case "reload":
        exit(reload() ? 0 : 1);
		break;
    case "createDirOrganization":
        if(isset($argv[2])){
            exit(createDirOrganization($argv[2]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createExtensionFile":
        if(isset($argv[2]) && isset($argv[3])){
            exit(createExtensionFile($argv[2],$argv[3]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createExtensionGlobals":
        if(isset($argv[2]) && isset($argv[3])){
            exit(createExtensionGlobals($argv[2],$argv[3]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createFeaturesFile":
        exit(createFeaturesFile() ? 0 : 1);
        break; 
    case "generateDialPlan":
        if(isset($argv[2])){
            exit(generateDialPlan($argv[2]) ? 0 : 1);
        }else
            error_exit("Missing arguments \n");
        break;
    case "createExtAddtionals":
        if(isset($argv[2])){
            exit(createExtAddtionals($argv[2]) ? 0 : 1);
        }else
            exit(createExtAddtionals() ? 0 : 1);
        break;
    case "writeTechRegister":
        exit(writeTechRegister() ? 0 : 1);
        break;
	default:
		error_exit("No action specified \n");
		break;
}

function error_exit($sMsg, $errorcode = 1)
{
    fwrite(STDERR, $sMsg);
    exit($errorcode);
}

function changeFilePermission($file)
{
	chown($file,"asterisk");
	chgrp($file,"asterisk");
	exec("chmod 664 $file 2>&1",$output, $ret);
	return true;
}

function reload(){
    $ret = $output = null;
	exec("/usr/sbin/asterisk -r -x 'core reload' 2>&1",$output,$ret);
	if($ret!=0){
        fwrite(STDERR, "Asterisk couldn't be reloaded. ".implode('', $output));
        return false;
	}
	return true;
}

function dialplanReload(){
    $ret = $output = null;
	exec("/usr/sbin/asterisk -r -x 'dialplan reload' 2>&1",$output,$ret);
	if($ret!=0){
        fwrite(STDERR, "Couldn't be reloaded asterisk dialplan. ".implode('', $output));
        return false;
    }
    return true;
}

function createDirOrganization($domain){
    $pathDial="/etc/asterisk/organizations";
    $exito=true;
    
    if(!is_dir($pathDial)){
        if(mkdir($pathDial)){
            exec("chown asterisk.asterisk $path",$output,$retval);
            exec("chmod 775 $path",$output,$retval);
        }else{
            fprintf(STDERR, "ERR: failed to create '/etc/asterisk/organizations' directory");
            return false;
        }
    }
    
    $pathlib="/var/lib/asterisk";
    $pathspool="/var/spool/asterisk";

    $astmonitor = $pathspool."/monitor";
    $astmeetme = $pathspool."/meetme";
    $astspooltmp = $pathspool."/tmp";
    $astlibsound = $pathlib."/sounds";
    
    $arrDir=array($astmonitor,$astmeetme,$astlibsound,$astspooltmp);
    foreach($arrDir as $dir){
        if(is_dir("$dir/$domain")){
            $date=date("YMd_His");
            rename("$dir/$domain","$dir/$domain"."_".$date);
        }
        
        if(mkdir("$dir/$domain")){
            exec("chown asterisk.asterisk $dir/$domain ",$output,$retval);
            exec("chmod 775 $dir/$domain",$output,$retval);
        }else{
            fprintf(STDERR, "ERR: failed to create $dir/$domain directory - %s\n", $output[0]);
            $exito=false;
            break;
        }
    }

    if(!$exito){
        foreach($arrDir as $dir){
            if(is_dir("$dir/$domain"))
                rmdir("$dir/$domain");
        }
        return false;
    }else{
        return true;
    }
}

function createExtensionFile($action,$orgdomain){
    $EXITO=false;
    $file="/etc/asterisk/extensions.conf";
    
    $content = <<<EXTENSIONS_CONFIG
[default]
exten => s,1,Playback(vm-goodbye)
exten => h,1,Hangup()

EXTENSIONS_CONFIG;
    
    $pDB=new paloDB("sqlite3:////var/www/db/elastix.db");
    $query="Select domain from organization";
    $result=$pDB->fetchTable($query,false);
    if($result===false){
        fprintf(STDERR, "ERR: Database connection elastix.db - %s\n", $pDB->errMsg);
        return false;
    }
       
    $arrDomain=array();
    foreach($result as $domain)
    {
        $arrDomain[]=$domain[0];
    }
    
    if($action=="add"){
        if(in_array($orgdomain,$arrDomain)===false){
            $arrDomain[]=$orgdomain;
        }
    }else{
        $index=array_search($orgdomain,$arrDomain);
        if($index!==false){    
            $arrDomain[$index]=null;
        }
    }
    
    $content .="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
    
    if(!is_file("/etc/asterisk/extensions_custom.conf")){
        if(file_put_contents("/etc/asteriskextensions_custom.conf","")!==false){
            $content .="#include extensions_custom.conf\n";
            changeFilePermission("/etc/asterisk/extensions_custom.conf");
        }
    }else
        $content .="#include extensions_custom.conf\n";
        
    $content .="#include extensions_globals.conf\n";
    
    if(!is_file("/etc/asterisk/extensions_additionals.conf")){
        if(file_put_contents("/etc/asterisk/extensions_additionals.conf","")!==false){
            $content .="#include extensions_additionals.conf\n";
            changeFilePermission("/etc/asterisk/extensions_additionals.conf");
        }
    }else
        $content .="#include extensions_additionals.conf\n";
        
    foreach($arrDomain as $value){
        if(isset($value) && $value!=""){
            if(!is_file("/etc/asterisk/organizations/extensions_".$value.".conf")){
                if(file_put_contents("/etc/asterisk/organizations/extensions_".$value.".conf","")!==false){
                    $content .="#include organizations/extensions_".$value.".conf\n";
                    changeFilePermission("/etc/asterisk/organizations/extensions_".$value.".conf");
                }
            }else{
                $content .="#include organizations/extensions_".$value.".conf\n";
            }
        }
    }
    $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        
    if(file_put_contents($file, $content)!==false){
        changeFilePermission($file);
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    }   
}

function createExtensionGlobals($action,$orgdomain){
    $EXITO=false;
    $file="/etc/asterisk/extensions.conf";
    
    $content = "";
    
    $pDB=new paloDB("sqlite3:////var/www/db/elastix.db");
    $query="Select domain from organization";
    $result=$pDB->fetchTable($query,false);
    if($result===false){
        fprintf(STDERR, "ERR: Database connection elastix.db - %s\n", $pDB->errMsg);
        return false;
    }
    
    $arrDomain=array();
    foreach($result as $domain){
        $arrDomain[]=$domain[0];
    }
    
    if($action=="add"){
        if(in_array($orgdomain,$arrDomain)===false){
            $arrDomain[]=$orgdomain;
        }
    }else{
        $index=array_search($orgdomain,$arrDomain);
        if($index!==false){    
            $arrDomain[$index]=null;
        }
    }

    $file="/etc/asterisk/extensions_globals.conf";
    $source_file="/var/www/elastixdir/asteriskconf/elastix_pbx.conf";
    $content ="[globals]\n";
    if(is_file($source_file)){
        if($handler=fopen($source_file,'r')){
            $content .= fread($handler, filesize($source_file));
        } 
    }else{
        fprintf(STDERR, "File /var/www/elastixdir/asteriskconf/elastix_pbx.conf dosen't exist\n");
        $content ="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        file_put_contents($file, $content);
        return false;
    }
    
    //las globales correspondientes a las truncales
    $pDBpbx=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    $queryTrunk="SELECT * from trunk";
    $trunks=$pDBpbx->fetchTable($queryTrunk,true,array());
    if($trunks===false){
        fprintf(STDERR, "ERR: Database connection elxppbx - %s\n", $pDBpbx->errMsg);
        return false;
    }elseif(count($trunks)!=0){
        foreach($trunks as $arrtemp){
            $trunkid=$arrtemp["trunkid"];
            $tech=$arrtemp["tech"];
            $channelId=$arrtemp["channelid"];
            $outcid=isset($arrtemp["outcid"])?$arrtemp["outcid"]:"";
            $maxchans=isset($arrtemp["maxchans"])?$arrtemp["maxchans"]:"";
            $outprefix=isset($arrtemp["dialoutprefix"])?$arrtemp["dialoutprefix"]:"";
            $disabled=isset($arrtemp["disabled"])?$arrtemp["disabled"]:"off";
            $keepCid=isset($arrtemp["keepcid"])?$arrtemp["keepcid"]:"off";
            $force=($keepCid=="all")?"1":"";

            $content .="OUT_$trunkid = $tech/$channelId\n";
            $content .="OUTCID_$trunkid = $outcid\n";
            $content .="OUTMAXCHANS_$trunkid = $maxchans\n";
            $content .="OUTPREFIX_$trunkid = $outprefix\n";
            $content .="OUTDISABLE_$trunkid = $disabled\n";
            $content .="OUTKEEPCID_$trunkid = $keepCid\n";
            $content .="FORCEDOUTCID_$trunkid = $force\n";

            $qPrefix="SELECT count(trunkid) from trunk_dialpatterns where trunkid=?";
            $trunkPrefix=$pDB->fetchTable($qPrefix,true,array($trunkid));
            if(count($trunkPrefix)>0)
                $content .="PREFIX_TRUNK_$trunkid = 1\n";
            else
                $content .="PREFIX_TRUNK_$trunkid = \n";
        }
    }
    
    if(count($arrDomain)!=0){
        $content .="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        foreach($arrDomain as $value)
        {
            if(isset($value) && $value!=""){
                //antes de incluir el archivo validamos que el mismo exista
                //ya que si no existe y lo incluimos esto provocara que asterisk crash
                //en caso de no existir el archivo se lo inteta crear
                if(!is_file("/etc/asterisk/organizations/extensions_globals_".$value.".conf")){
                    if(file_put_contents("/etc/asterisk/organizations/extensions_globals_".$value.".conf","")!==false){
                        $content .="#include organizations/extensions_globals_".$value.".conf\n";
                        changeFilePermission("/etc/asterisk/organizations/extensions_globals_".$value.".conf");
                    }
                }else
                    $content .="#include organizations/extensions_globals_".$value.".conf\n";
            }
        }
        $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";  
    }else{
        $content .="\n; BEGIN ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
        $content .="; END ELASTIX INCLUDE FILE DO NOT REMOVE THIS LINE\n";
    }
    
    if(file_put_contents($file, $content)!==false){
        changeFilePermission($file);
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    } 
}

function createExtensionDomainFile($domain,$code){
    $EXITO=false;
    $fsource="/var/www/elastixdir/asteriskconf/generic_extensions.conf";
    $extFile="/etc/asterisk/organizations/extensions_$domain.conf";
    $extAddFile="/etc/asterisk/organizations/extensions_additionals_$domain.conf";
    $extCusFile="/etc/asterisk/organizations/extensions_custom_$domain.conf";
    $extGlobalFile="/etc/asterisk/organizations/extensions_globals_$domain.conf";
    if(is_file($fsource)){
        if($handler=fopen($fsource,'r')){
            $content = fread($handler, filesize($fsource));
            $content = str_replace("{CODE}", "$code", $content);
            $content = str_replace("{DOMAIN}", "$domain", $content);
            fclose($handler);
            
            if(file_put_contents($extFile, $content)!==false){
                changeFilePermission($extFile);
            }else{
                fprintf(STDERR, "ERR: File $extFile couldn't be written");
                return false;
            }  
            
            $content="";
            foreach(array($extAddFile,$extCusFile,$extGlobalFile) as $file){
                if(is_file($file)===false){
                    if(file_put_contents($file, $content)!==false){
                        changeFilePermission($file);
                    }else{
                        fprintf(STDERR, "ERR: File $file couldn't be written");
                        return false;
                    }    
                }
            }
            $EXITO=true;
        }else{
            fprintf(STDERR, "ERR: Couldn't be opened for reading file - %s\n", $fsource);
        }
    }else{
        fprintf(STDERR, "ERR: File extensions_generic.conf doesn't exist, new fiel couldn't be created - %s\n", $output[0]);
    }
    return $EXITO;
}

function createExtensionGlobalsDomainFile($domain,$code){
    $file="/etc/asterisk/organizations/extensions_globals_$domain.conf";
    $contenido="";
            
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    //leemos todas las variables globales de la organizacion desde la tabla globals
    $query="SELECT variable,value from globals where organization_domain=?";
    $result=$pDB->fetchTable($query,false,array($domain));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection elxppbx - %s\n", $pDB->errMsg);
        return false;
    }elseif(count($result)!=0){
        $contenido = "[globals](+)\n"; //no quitar (+), esto permite escribir un mismo contexto en distintos archivos
        foreach($result as $arrtemp){
            if($arrtemp[0]!="CREATE_VM")
                $contenido .=$code."_$arrtemp[0]=$arrtemp[1]\n";
        }
    }

    if(file_put_contents($file, $contenido)!==false){
        changeFilePermission($file);
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    } 
}

function generateDialPlan($domain){
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    $pDBSQLITE=new paloDB("sqlite3:////var/www/db/elastix.db");
    
    //valido que exista el dominio y obtengo el code asociado a este
    $queryCode="SELECT code from organization where domain=?";
    $resultc=$pDBSQLITE->getFirstRowQuery($queryCode, false, array($domain));
    if($resultc===false){
        fprintf(STDERR, "ERR: Database connection elastix.db - %s\n", $pDBSQLITE->errMsg);
        return false;
    }elseif(count($resultc)==0){
        fprintf(STDERR, "ERR: Organization dosen't exist\n");
        return false;
    }
    $code=$resultc[0];

    $file="/etc/asterisk/organizations/extensions_additionals_$domain.conf";

    $arrContext=array();
    $arrFromInt=array();
    
    //escribimos el archivos extensions_domain.conf en caso de que esto no haya sido escrito
    if(createExtensionDomainFile($domain,$code)==false){
        fprintf(STDERR, "ERR: File extesions_$domain.conf couln't be written.\n");
        return false;
    }
    
    //escribir las variables globales
    if(createExtensionGlobalsDomainFile($domain,$code)==false){
        fprintf(STDERR, "ERR: Globlas variables couldn't be written.\n");
        return false;
    }
    
    //genero el plan de marcado relacionado con las extension internas
    $pDevice=new paloDevice($domain,"sip",$pDB);
    $arrContextExtLocal=$pDevice->createDialPlanLocalExtension($arrFromInt);
    if($arrContextExtLocal===false || !is_array($arrContextExtLocal))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pDevice->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextExtLocal);

    //genero el plan de marcado de los faxes
    $arrContextExtFax=$pDevice->createDialPlanFaxExtension($arrFromInt);
    if($arrContextExtFax===false || !is_array($arrContextExtFax))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pDevice->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextExtFax);
    
    //genero plan de marcado relacionado con los irvs
    $pIVR=new paloIvrPBX($pDB,$domain);
    $arrContextIVR=$pIVR->createDialPlanIvr($arrFromInt);
    if($arrContextIVR===false || !is_array($arrContextIVR))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pIVR->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextIVR);

    //genero plan de marcado relacionado a rutas de entrada
    $pInbound=new paloSantoInbound($pDB,$domain);
    $arrContextIN=$pInbound->createDialplanIndbound($arrFromInt);
    if($arrContextIN===false || !is_array($arrContextIN))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pIVR->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextIN);
    
    //genero plan de marcado relacionado con las colas
    $pQueue=new paloQueuePBX($pDB,$domain);
    $arrContextQueue=$pQueue->createDialPlanQueue($arrFromInt);
    if($arrContextQueue===false || !is_array($arrContextQueue))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pQueue->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextQueue);

    //genero el plan marcado relacionado con los features codes
    $pFC=new paloFeatureCodePBX($pDB,$domain);
    $arrContextFeaturesCode=$pFC->createDialPlanFeaturesCode($arrFromInt);
    if($arrContextFeaturesCode===false || !is_array($arrContextFeaturesCode))
        fprintf(STDERR, "ERR: Error written dialplan - %s\n",$pFC->errMsg);
    else
        $arrContext=array_merge($arrContext,$arrContextFeaturesCode);
        
    //incluimos los contextos dentro de from-internal-additional
    $fromInternal=new paloContexto($code,"from-internal-additional");
    $fromInternal->arrInclude=$arrFromInt;
    $fromInternal->arrExtensions=array(new paloExtensions("h",new ext_hangup(),"1"));
    $arrContext[]=$fromInternal;

    $contenido="";
    
    foreach($arrContext as $value){
        if(isset($value)){
            if(empty($value->errMsg) && is_object($value)){
                $contenido .=$value->stringContexto($value->arrInclude,$value->arrExtensions);
            }else{
                fprintf(STDERR, "ERR: Error written dialplan - %s\n",$value->errMsg);
            }
        }
    }
       
    if(file_put_contents($file, $contenido)!==false){
        changeFilePermission($file);
        if(reload()==false)
            fprintf(STDERR, "ERR: Asterisk couldn't be reloaded");
        return true;
    }else{
        fprintf(STDERR, "ERR: File $file couldn't be written");
        return false;
    }
}

function createFeaturesFile(){
    $file="/etc/asterisk/features.conf";
    
    //si no existe el archivo features.conf este se crea
    if(is_file($file)===false){
            $contenido = <<<FEATURES_CONFIG
[general]
#include features_general.conf
#include features_general_custom.conf

[featuremap]
#include features_map.conf
#include features_map_custom.conf

[applicationmap]
#include features_applicationmap.conf
#include features_applicationmap_custom.conf
FEATURES_CONFIG;

    if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    
    if(createFeatureMapfile()){
        if(createFeatureGeneralfile())
            return createFeatureApplicationMapfile();
        else
            return false;
    }else
        return false;
}

function createFeatureMapfile(){
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    
    $contenido="";
    $file="/etc/asterisk/features_map.conf";
    $query="Select name, default_code from features_code_settings where name=? or name=? or name=? or name=? and estado=?";
    $result=$pDB->fetchTable($query,true,array("blind_transfer","attended_transfer","one_touch_monitor","disconnect_call",'enabled'));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection globals_settings - %s\n", $pDB->errMsg);
        return false;
    }else{
        foreach($result as $value){
            switch ($value["name"]) {
                case "blind_transfer":
                    $feature="blindxfer";
                    break;
                case "attended_transfer":
                    $feature="atxfer";
                    break;
                case "one_touch_monitor":
                    $feature="automon";
                    break;
                case "disconnect_call":
                    $feature="disconnect";
                    break;
            }
            $contenido .= $feature."=".$value["default_code"]."\n";
        }
    }
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }
    
    $file="/etc/asterisk/features_map_custom.conf";
    $contenido="";
    if(is_file($file)===false){
        if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    
    return true;
}

//TODO
//falta ver que se va ha hacer con el asunto de la llamadas parqueadas
//en caso de existir debe definirse aqui el numero de la estension
function createFeatureGeneralfile(){
    $file="/etc/asterisk/features_general.conf";
    $contenido="";
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }
    
    $file="/etc/asterisk/features_general_custom.conf";
    $contenido="";
    if(is_file($file)===false){
        if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    return true;
}

//TODO
function createFeatureApplicationMapfile(){
    $file="/etc/asterisk/features_applicationmap.conf";
    $contenido="";
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }
    
    $file="/etc/asterisk/features_applicationmap_custom.conf";
    $contenido="";
    if(is_file($file)===false){
        if(file_put_contents("$file", $contenido)===false){
            fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
            return false;
        }else{
            changeFilePermission($file);
        }
    }
    return true;
}

/**
    funcion que escribe el archivo extensions_did.conf
    ese archivo contiene el contexto from-pstn. Con ese contexto
    es posible redirigir las llamadas a la organizacion con el correspondiente
    did. Este archivo es incluido dentro del archivo extensions.conf
    @param $domain -> si esta seteado entonces los did con dicho dominio
                      no deben ser incluicrados
*/
function createExtAddtionals($domain=null){
    $file="/etc/asterisk/extensions_additionals.conf";
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    
    if(!is_null($domain)){
        if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $domain)){
            $domain=null;
        }
    }
    
    $contenido="\n[from-pstn]\n";
    $contenido .="include =>from-pstn-custom\n";
    $contenido .="include =>ext-did\n";
    
    $pDBSQLITE=new paloDB("sqlite3:////var/www/db/elastix.db");
    //valido que exista el dominio y obtengo el code asociado a este
    $queryCode="SELECT code,name,domain from organization where domain=?";
    
    $query="SELECT did, organization_domain from did where organization_domain IS NOT NULL";
    $result=$pDB->fetchTable($query,true);
    if($result===false){
        fprintf(STDERR, "ERR: Database connection did - %s\n", $pDB->errMsg);
        return false;
    }
    
    //debemos eliminar los anteriores DID de la base astDB
    $errorMng="";
    $astMang=AsteriskManagerConnect($errorMng);
    if($astMang==false){
        fprintf(STDERR, "ERR: Asterisk Manager connection - %s\n", $errorMng);
        return false;
    }
    $connection=$astMang->database_delTree("DID");
    if(strtoupper($connection["Response"]) == "ERROR"){
        fprintf(STDERR, "ERR: Asterisk astDB - couldn't set DID\n");
        return false;
    }
    
    $arrCodeOrg=array();
    $arrExt=array();
    $contexto="";
    foreach($result as $value){
        $exten=$value["did"];
        if(!empty($value["organization_domain"])){
            if($value["organization_domain"]!=$domain){
                $resultc=$pDBSQLITE->getFirstRowQuery($queryCode, true, array($value["organization_domain"]));
                if($resultc!=false){
                    $arrExt[]=new paloExtensions($exten,new ext_noop("Reciving call to organization ".$resultc['name']."( ".$value["organization_domain"].")"));
                    $arrExt[]=new paloExtensions($exten,new ext_goto("1",'${EXTEN}',$resultc['code'].'-from-pstn'),"1");
                    $arrExt[]=new paloExtensions($exten,new ext_macro($resultc['code']."-Hangupcall"));
                    $astMang->database_put("DID",$exten,$value["organization_domain"]);
                    $arrCodeOrg["organization_domain"]=$arrCodeOrg["code"];
                }
            }
        }
    }
    
    $contenido .="\n[ext-did]\n";
    $contenido .="include =>ext-did-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }

    //contexto from-analog
    //a este contexto llegan la llamadas provenientes de los puertos analogicos
    $arrExt=array();
    $arrExt[]=new paloExtensions("_X.",new ext_setvar("DID",'${EXTEN}'),"1");
    $arrExt[]=new paloExtensions("_X.",new ext_goto("1",'s'));
    $arrExt[]=new paloExtensions("s",new ext_noop('Entering from-analog with DID == ${DID}'));
    $arrExt[]=new paloExtensions("s",new ext_ringing());
    $arrExt[]=new paloExtensions("s",new ext_setvar("DID",'${IF($["${DID}"= "]?s:${DID})}'));
    $arrExt[]=new paloExtensions("s",new ext_noop('DID is now ${DID}'));
    $arrExt[]=new paloExtensions("s",new ext_gotoif('$["${CHANNEL:0:5}"="DAHDI"]','dahdiok','checkzap'));
    $arrExt[]=new paloExtensions("s",new ext_gotoif('$["${CHANNEL:0:3}"="Zap"]','zapok','neither'),"checkzap");
    $arrExt[]=new paloExtensions("s",new ext_gosub(1,'${DID}'),"neither");
    $arrExt[]=new paloExtensions("s",new ext_hangup());
    $arrExt[]=new paloExtensions("s",new ext_noop('Is a DAHDI Channel'),"dahdiok");
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CHANNEL:6}'));
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CUT(CHAN,-,1)}'));
    $arrExt[]=new paloExtensions("s",new ext_macro(1,'${DID}','from-dahdi-${CHAN}'));
    $arrExt[]=new paloExtensions("s",new ext_noop('Returned from Macro from-dahdi-${CHAN}'));
    $arrExt[]=new paloExtensions("s",new ext_goto(1,'${DID}',"from-pstn"));
    $arrExt[]=new paloExtensions("s",new ext_noop('Is a Zaptel Channel'),'zapok');
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CHANNEL:4}'));
    $arrExt[]=new paloExtensions("s",new ext_setvar("CHAN",'${CUT(CHAN,-,1)}'));
    $arrExt[]=new paloExtensions("s",new ext_macro(1,'${DID}','from-dahdi-${CHAN}'));
    $arrExt[]=new paloExtensions("s",new ext_noop('Returned from Macro from-dahdi-${CHAN}'));
    $arrExt[]=new paloExtensions("s",new ext_goto(1,'${DID}',"from-pstn"));
    
    $contenido .="\n[from-analog]\n";
    $contenido .="include =>from-analog-custom\n";
    if(is_array($arrExt)){
        foreach($arrExt as $extension){
            if(!is_null($extension) && is_object($extension))
                $contenido .=$extension->data."\n";
        }
    }
    
    $query="SELECT dd.did, dd.data, di.organization_domain from did_details dd join did di on dd.did=di.did where di.organization_domain IS NOT NULL and dd.keyword=? and di.type=?";
    $result=$pDB->fetchTable($query,true,array("port","analog"));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection did - %s\n", $pDB->errMsg);
        return false;
    }
    foreach($result as $value){
        $arrExt=array();
        if(!empty($value["organization_domain"])){
            if($value["organization_domain"]!=$domain){
                $tmp=explode("/",$value["data"]);
                if(count($tmp)==2){
                    $arrExt[]=new paloExtensions("s",new ext_noop('Entering to macro from-dahdi-'.$tmp[1].' with DID == ${DID}'),"1");
                    $arrExt[]=new paloExtensions("s",new ext_setvar("__FROM_DID",$value["did"]));
                    $arrExt[]=new paloExtensions("s",new ext_goto("1",$value["did"],'from-pstn'));
                    $contenido .="\n[from-dahdi-$tmp[1]]\n";
                    if(is_array($arrExt)){
                        foreach($arrExt as $extension){
                            if(!is_null($extension) && is_object($extension))
                                $contenido .=$extension->data."\n";
                        }
                    }
                }
            }
        }
    }
    
    if(file_put_contents("$file", $contenido)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }     
    
    return createFileDahdiChannelAdd($domain);
}


function createFileDahdiChannelAdd($domain=null){
    $file="/etc/asterisk/chan_dahdi_additional.conf";
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    
    if(!is_null($domain)){
        if(!preg_match("/^(([[:alnum:]-]+)\.)+([[:alnum:]])+$/", $domain)){
            $domain=null;
        }
    }
    
    $pDBSQLITE=new paloDB("sqlite3:////var/www/db/elastix.db");
    //valido que exista el dominio y obtengo el code asociado a este
    $queryCode="SELECT code from organization where domain=?";
    
    //obtenemos los puertos que han sido asinados a un did y que pertencen a una organizacion
    $query="SELECT dd.did, dd.data, di.organization_domain from did_details dd join did di on dd.did=di.did where di.organization_domain IS NOT NULL and dd.keyword=? and di.type=?";
    $result=$pDB->fetchTable($query,true,array("port","analog"));
    if($result===false){
        fprintf(STDERR, "ERR: Database connection did - %s\n", $pDB->errMsg);
        return false;
    }
    
    $content="";
    
    if(is_file("/etc/asterisk/chan_dahdi_custom.conf")===false){
        if(file_put_contents("/etc/asterisk/chan_dahdi_custom.conf", "")!==false){
            $content .="#include chan_dahdi_custom.conf";
            changeFilePermission("/etc/asterisk/chan_dahdi_custom.conf");
        }
    }else
        $content .="#include chan_dahdi_custom.conf\n";
        
    foreach($result as $value){
        if(!empty($value["organization_domain"])){
            if($value["organization_domain"]!=$domain){
                $resultc=$pDBSQLITE->getFirstRowQuery($queryCode, true, array($value["organization_domain"]));
                if($resultc!=false){
                    $content .="context=from-analog\n";
                    $content .="channel => ".$value["data"]."\n";
                }
            }
        }
    }
    
    if(file_put_contents("$file", $content)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - %s\n", $file);
        return false;
    }else{
        changeFilePermission($file);
    }     
    
    return true;
}

function writeTechRegister(){
    $query="SELECT tech,string_register from trunk where tech=? or tech=?";
    $pDB=new paloDB(generarDSNSistema("asteriskuser", "elxpbx"));
    $result=$pDB->fetchTable($query,true,array("sip","iax2"));
    if($result===false){
    }
    
    $file_sip=$file_iax="\n";
    //obtenosmo los string de conneccion de las truncales que sean sip o iax
    foreach($result as $value){
        if(!empty($value["string_register"])){
            if($value["tech"]=="sip"){
                $file_sip .="register => ".$value["string_register"]."\n";
            }elseif($value["tech"]=="iax2"){
                $file_iax .="register => ".$value["string_register"]."\n";
            }
        }
    }
    
    if(file_put_contents("/etc/asterisk/sip_register.conf", $file_sip)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - '/etc/asterisk/sip_register.conf'\n");
        return false;
    }else{
        changeFilePermission("/etc/asterisk/sip_register.conf");
    }
    
    if(file_put_contents("/etc/asterisk/iax_register.conf", $file_iax)===false){
        fprintf(STDERR, "ERR: Couldn't be written file - '/etc/asterisk/iax_register.conf'\n");
        return false;
    }else{
        changeFilePermission("/etc/asterisk/iax_register.conf");
    }
    return true;
}

?>