#!/usr/bin/php
<?php
/*
  vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4:
  Codificación: UTF-8
  +----------------------------------------------------------------------+
  | Copyright (c) 1997-2003 Palosanto Solutions S. A.                    |
  +----------------------------------------------------------------------+
  | Cdla. Nueva Kennedy Calle E 222 y 9na. Este                          |
  | Telfs. 2283-268, 2294-440, 2284-356                                  |
  | Guayaquil - Ecuador                                                  |
  +----------------------------------------------------------------------+
  | Este archivo fuente está sujeto a las políticas de licenciamiento    |
  | de Palosanto Solutions S. A. y no está disponible públicamente.      |
  | El acceso a este documento está restringido según lo estipulado      |
  | en los acuerdos de confidencialidad los cuales son parte de las      |
  | políticas internas de Palosanto Solutions S. A.                      |
  | Si Ud. está viendo este archivo y no tiene autorización explícita    |
  | de hacerlo, comuníquese con nosotros, podría estar infringiendo      |
  | la ley sin saberlo.                                                  |
  +----------------------------------------------------------------------+
  | Autores: Alex Villacís Lasso <a_villacis@palosanto.com>              |
  +----------------------------------------------------------------------+
  $Id: elastix-helper.php,v 1.1 2007/01/09 23:49:36 alex Exp $
*/

/*****************************************************************************
 * This program, when run, will extract the IP addresses of all ethX network
 * devices, along with network and netmask. It will then setup a configuration
 * file (/etc/sysconfig/rtpproxy-multi) for configuration of the rtpproxy-multi
 * startup script. Additionally it will write a configuration file at
 * /etc/kamailio/kamailio-mhomed-elastix.cfg that will setup Kamailio to use
 * the multiple rtpproxy instances started by rtpproxy-multi. This script will
 * _NOT_ restart any services.
 ****************************************************************************/

define('PASSWD_PATH', '/etc/elastix.conf');

function ip2octet($ip)
{
    foreach (explode('.', $ip) as $i => $o) $oct[$i] = (int)$o;
    return $oct;
}

function network_from_ip($ip_octet, $mask_octet)
{
    foreach ($ip_octet as $i => $o) $net_octet[$i] = $o & $mask_octet[$i];
    return $net_octet;
}

function lookup_closest_interface(&$if_list, $oct)
{
    $closest_idx = NULL;

    foreach ($if_list as $idx => $if_entry) {
        // Check if specified IP belongs to this network
        if ($if_entry['net_octet'] == network_from_ip($oct, $if_entry['mask_octet'])) {
            if (is_null($closest_idx) || $if_list[$closest_idx]['mask_octet'] < $if_entry['mask_octet'])
                $closest_idx = $idx;
        }
    }
    
    return $closest_idx;
}

// Need custom function to load conf file, odd characters choke parse_ini_file()
function load_keys()
{
    $keys = array();
    if (file_exists(PASSWD_PATH)) foreach (file(PASSWD_PATH) as $s) {
        $s = rtrim($s, "\r\n");
        $regs = NULL;
        if (preg_match('/^(\w+)=(.*)$/', $s, $regs))
            $keys[$regs[1]] = $regs[2];
    }
    return $keys;
}

// Get IP of Asterisk instance, assumes localhost by default
$asterisk_ip = '127.0.0.1';
if (count($argv) > 1) {
    if (!preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/', $argv[1])) {
        fputs(STDERR, "WARN: invalid IPv4 address '{$argv[1]}', using default of $asterisk_ip instead!\n");
    } else {
        $asterisk_ip = $argv[1];
    }
}

// Get UDP port of Asterisk instance for SIP, assumes 5080 for localhost, else 5060.
$asterisk_port = ($asterisk_ip == '127.0.0.1') ? 5080 : 5060;
if (count($argv) > 2) {
    if (!ctype_digit($argv[2]) || $argv[2] > 65535) {
        fputs(STDERR, "WARN: invalid SIP port '{$argv[2]}', using default of $asterisk_port instead!\n");
    } else {
        $asterisk_port = (int)$argv[2];
    }
}

//print "DEBUG: Configuring for Asterisk instance at {$asterisk_ip}:{$asterisk_port}\n";

// Collect information on IPv4 addresses of active interfaces.
// Run the 'ifconfig' command with LANG=C to have consistent parsing
putenv('LANG=C');
$output = NULL; $retval = NULL; $if_list = array();
exec('/sbin/ifconfig', $output, $retval);
foreach ($output as $s) {
    // This pattern works for CentOS 6 only, will break on Fedora
    $regs = NULL;
    if (preg_match('/inet addr:(\S+).+Mask:(\S+)/', $s, $regs)) {
        $if_entry = array(
            'ip_addr'    => $regs[1],
            'mask_addr'  => $regs[2],
            'mask_octet' => ip2octet($regs[2]),
            'ip_octet'   => ip2octet($regs[1]),
            'net_octet'  => array(0, 0, 0, 0),
        );
        $if_entry['net_octet'] = network_from_ip($if_entry['ip_octet'], $if_entry['mask_octet']);

        $if_list[] = $if_entry;
    }
}

//print "DEBUG: detected IPv4 addresses: "; print_r($if_list);

// Save non-localhost IPs into database
$passwords = load_keys();
try {
    $db = new PDO('mysql:host=localhost', 'root', $passwords['mysqlrootpwd']);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $sth = $db->prepare('REPLACE INTO elxpbx.global_domains (domain) VALUES (?)');
    foreach ($if_list as $if_entry) {
        if ($if_entry['ip_addr'] != '127.0.0.1') $sth->execute(array($if_entry['ip_addr']));
    }

    $db = NULL;
} catch (PDOException $e) {
    fputs(STDERR, "ERR: unable to save current IPs to database - ".$e->getMessage()."\n");
}

// Find out which interface will be used to contact the Asterisk instance. This
// will be labeled the Kamailio interface. If no address matches (non-local 
// Asterisk), bail out.
$asterisk_octet = ip2octet($asterisk_ip);
$kamailio_idx = lookup_closest_interface($if_list, $asterisk_octet);

if (is_null($kamailio_idx)) {
    fputs(STDERR, "FATAL: Asterisk IP {$asterisk_ip} does not belong to any of the networks for current interfaces!\n");
    exit(1);
}
$kamailio_ip = $if_list[$kamailio_idx]['ip_addr'];
//print "DEBUG: Configuring for Kamailio instance at {$kamailio_ip}\n";

$route_mhomed_elastix = <<<ROUTE_MHOMED_ELASTIX
#!ifdef WITH_ASTERISK
#!substdef "/ASTERISKIP/{$asterisk_ip}/"
#!substdef "/ASTERISKPORT/{$asterisk_port}/"
asterisk.bindip = "ASTERISKIP" desc "Asterisk IP Address"
asterisk.bindport = "ASTERISKPORT" desc "Asterisk Port"
kamailio.bindip = "{$kamailio_ip}" desc "Kamailio IP Address"
kamailio.bindport = "5060" desc "Kamailio Port"
#!endif

mhomed = 1

route[MHOMED_ELASTIX] {

	# TODO: auto-insert advertised public address here	
	\$var(rr_advertise_address) = \$null;
}


ROUTE_MHOMED_ELASTIX;

file_put_contents('/etc/kamailio/kamailio-mhomed-elastix.cfg', $route_mhomed_elastix);
exit(0);
?>
