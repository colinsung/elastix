#!/usr/bin/php
<?php
/*
  vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4:
  CodificaciÃ³n: UTF-8
  +----------------------------------------------------------------------+
  | Elastix version 2.0                                                  |
  | http://www.elastix.org                                               |
  +----------------------------------------------------------------------+
  | Copyright (c) 2006 Palosanto Solutions S. A.                         |
  +----------------------------------------------------------------------+
  | Cdla. Nueva Kennedy Calle E 222 y 9na. Este                          |
  | Telfs. 2283-268, 2294-440, 2284-356                                  |
  | Guayaquil - Ecuador                                                  |
  | http://www.palosanto.com                                             |
  +----------------------------------------------------------------------+
  | The contents of this file are subject to the General Public License  |
  | (GPL) Version 2 (the "License"); you may not use this file except in |
  | compliance with the License. You may obtain a copy of the License at |
  | http://www.opensource.org/licenses/gpl-license.php                   |
  |                                                                      |
  | Software distributed under the License is distributed on an "AS IS"  |
  | basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See  |
  | the License for the specific language governing rights and           |
  | limitations under the License.                                       |
  +----------------------------------------------------------------------+
  | The Original Code is: Elastix Open Source.                           |
  | The Initial Developer of the Original Code is PaloSanto Solutions    |
  +----------------------------------------------------------------------+
  $Id: faxconfig.php,v 1.1 2007/01/09 23:49:36 alex Exp $
*/
require_once 'Console/Getopt.php';

define('CONFIGDIR_IAXMODEM', '/etc/iaxmodem');
define('CONFIGDIR_HYLAFAX', '/var/spool/hylafax/etc');
define('INITTAB_MARKER', "# Don't remove or modify this comment. The following block is for fax setup.");
define('HYLAFAX_ALLOWED_HOSTS', 'hosts.hfaxd');

if(!isset($argv[1]))
    exit(1);

/*recibe como parametros
	$argv[1] = accion (add, delete, getfaxhots,setfaxhosts,faxmaster)
	$argv[2] = dev_id
	$argv[3] = port
	$argv[4] = country_code
	$argv[5] = area_code
	$argv[6] = clid_name
	$argv[7] = clid_number
	$argv[8] = extension
	$argv[9] = secret
	$argv[10] = email
*/
switch($argv[1]){
	case 'add':
		if(isset($argv[2]) && isset($argv[3]) && isset($argv[4]) && isset($argv[5]) && isset($argv[6]) && isset($argv[7])  && isset($argv[8])  && isset($argv[9]) && isset($argv[10])){
			newFax($argv[2],$argv[3],$argv[4],$argv[5],$argv[6],$argv[7],$argv[8],$argv[9],$argv[10]);
		}else
			error_exit("Missing arguments",1);
		break;
	case 'edit':
		if(isset($argv[2]) && isset($argv[3]) && isset($argv[4]) && isset($argv[5]) && isset($argv[6]) && isset($argv[7])  && isset($argv[8])  && isset($argv[9]) && isset($argv[10])){
			editFax($argv[2],$argv[3],$argv[4],$argv[5],$argv[6],$argv[7],$argv[8],$argv[9],$argv[10]);
		}else
			error_exit("Missing arguments",1);
		break;
	case 'delete':
		if(isset($argv[2])){
			deleteFax($argv[2]);
		}else
			error_exit("Missing arguments",1);
		break;
	case 'getfaxhosts':
		break;
	case 'setfaxhosts':
		break;
	case 'faxmaster':
		break;
	case 'createDirFax':
		if(isset($argv[2])){
			createDirFax($argv[2]);
		}else
			error_exit("Missing arguments",1);
		break;
	case 'restartService':
		restartService();
		break;
	default:
		error_exit("No action specified \n");
		break;
}

function error_exit($sMsg, $errorcode = 1)
{
    fwrite(STDERR, $sMsg);
    exit($errorcode);
}

/*
 * This program operates on the assumption that the desired fax configuration
 * has been written in /var/www/db/fax.db and the system needs to be configured
 * to reflect the configuration in the database. In order to do this, the
 * program will just delete all configuration and create it anew. The port and
 * device numbers are assumed to have been already assigned. The operations are
 * as follows:
 * 1) Read all the faxes to be configured from the database
 * 2) Remove all files from iaxmodem configuration
 * 3) Remove all files from hylafax configuration
 * 4) Remove the configuration section from /etc/inittab
 * 5) Add the updated configuration section to /etc/inittab
 * 6) Overwrite /var/spool/hylafax/etc/FaxDispatch file with emails for each fax
 * 7) Create all of the iaxmodem files
 * 8) Create all of the hylafax files, taking care of uucp.uucp ownership
 * 9) Restart init hylafax iaxmodem
 *
 * No attempt is made to preserve custom fax ports or ttys.
 */
function newFax($dev_id,$port,$country_code,$area_code,$clid_number,$extension,$secret,$email,$clid_name)
{
	$bExito = TRUE;

	$faxData=array();
	//el dev_id debe ser de 4 caracteres, y solo pueden se numeros y letras
	if(!preg_match('/[[:alnum:]]{3}/',$dev_id)){
		error_exit("Device Id not valid");
	}
	$faxData["dev_id"]=$dev_id;
	$faxData["port"]=$port;
	$faxData["country_code"]=$country_code;
	$faxData["area_code"]=$area_code;
	$faxData["clid_number"]=$clid_number;
	$faxData["clid_name"]=$clid_name;
	$faxData["extension"]=$extension;
	$faxData["secret"]=$secret;
	$faxData["email"]=$email;

	// Remove if exist old file with the same dev_id, they shouldn't be exist
    array_map(
        'unlink',
        array_merge(
            glob(CONFIGDIR_IAXMODEM.'/iaxmodem-cfg.ttyIAX'.$dev_id),
            glob(CONFIGDIR_HYLAFAX.'/config.ttyIAX'.$dev_id)));

	 // Update the fax configuration in /etc/inittab
    writeInittab($faxData);

    // Update /var/spool/hylafax/etc/FaxDispatch
    writeFaxDispatch($faxData);

    // Write file configuration for new fax
	writeIaxmodemConfig($faxData);
	writeHylafaxConfig($faxData);

    return $bExito;
}

function restartService(){
	// Restart all relevant services
    exec('/sbin/init q');
    exec('/sbin/service iaxmodem restart > /dev/null 2>&1');
    exec('/sbin/service hylafax restart > /dev/null 2>&1');
}

function deleteFax($dev_id){
	$bExito=true;
	//el dev_id debe ser de 4 caracteres, y solo pueden se numeros y letras
	if(!preg_match('/[[:alnum:]]{3}/',$dev_id)){
		error_exit("Device Id not valid");
	}
	// Remove if exist old file with the same dev_id, they shouldn't be exist
    array_map(
        'unlink',
        array_merge(
            glob(CONFIGDIR_IAXMODEM.'/iaxmodem-cfg.ttyIAX'.$dev_id),
            glob(CONFIGDIR_HYLAFAX.'/config.ttyIAX'.$dev_id)));

	// Update the fax configuration in /etc/inittab
	deleteDevInittab($dev_id);

	 // Update /var/spool/hylafax/etc/FaxDispatch
    deleteFaxDispatch($dev_id);

    return $bExito;
}

//al editar un fax la informacion en /etc/inittab y en /var/spool/hylafax/etc/FaxDispatch
//no se ven alteradas
function editFax($dev_id,$port,$country_code,$area_code,$clid_number,$extension,$secret,$email,$clid_name){
	$bExito=true;
	$faxData=array();

	//el dev_id debe ser de 4 caracteres, y solo pueden se numeros y letras
	if(!preg_match('/[[:alnum:]]{3}/',$dev_id)){
		error_exit("Device Id not valid");
	}

	$faxData["dev_id"]=$dev_id;
	$faxData["port"]=$port;
	$faxData["country_code"]=$country_code;
	$faxData["area_code"]=$area_code;
	$faxData["clid_number"]=$clid_number;
	$faxData["clid_name"]=$clid_name;
	$faxData["extension"]=$extension;
	$faxData["secret"]=$secret;
	$faxData["email"]=$email;

	// Remove if exist old file with the same dev_id, they shouldn't be exist
    array_map(
        'unlink',
        array_merge(
            glob(CONFIGDIR_IAXMODEM.'/iaxmodem-cfg.ttyIAX'.$dev_id),
            glob(CONFIGDIR_HYLAFAX.'/config.ttyIAX'.$dev_id)));

  // Write file configuration for new fax
	writeIaxmodemConfig($faxData);
	writeHylafaxConfig($faxData);

    return $bExito;
}

function writeInittab($faxData)
{
	$devId=$faxData["dev_id"];
	$sFaxInittab = "f$devId:2345:respawn:/usr/sbin/faxgetty ttyIAX$devId\n";
	$fhandler=fopen('/etc/inittab',"a+");
    fputs($fhandler,$sFaxInittab);
	fclose($fhandler);
}

function deleteDevInittab($dev_id)
{
	$lineas = array();
	$sRutaArchivo='/etc/inittab';
	if(file_exists($sRutaArchivo) && filesize($sRutaArchivo)!=0){
		foreach (file($sRutaArchivo) as $sLinea) {
			// Remover el fax anterior
			$cadena='/^f'.$dev_id.':2345:respawn/';
			if (!preg_match("$cadena", $sLinea)) {
				$lineas[] = $sLinea;
			}
		}
		file_put_contents('/etc/inittab', $lineas);
	}
}

function writeFaxDispatch($faxData)
{
	$sRutaArchivo='/var/spool/hylafax/etc/FaxDispatch';
	if(file_exists($sRutaArchivo) && filesize($sRutaArchivo)!=0){
		$handler=fopen($sRutaArchivo,"r+");
		if ($handler) {
			while(($linea=fgets($handler))!== false){
				if(preg_match('/esac/',$linea)){
					$sContenido="  ttyIAX".$faxData['dev_id'].") SENDTO=".$faxData['email'].";;\n";
					fseek($handler, $anterior);
					fputs($handler,$sContenido);
					fputs($handler,"esac\n");
					break;
				}
				$anterior=ftell($handler);
			}
			fclose($handler);
		}
	}else{
		$sContenido =
        "SENDTO=root;\n" .
        "FILETYPE=pdf;\n" .
        "\n" .
        "case \"\$DEVICE\" in\n";
		$sContenido .= "  ttyIAX".$faxData['dev_id'].") SENDTO=".$faxData['email'].";;\n";
		$sContenido .= "esac\n";
		file_put_contents($sRutaArchivo, $sContenido);
	}
    chown($sRutaArchivo, 'uucp'); chgrp($sRutaArchivo, 'uucp');
    chmod($sRutaArchivo, 0644);
}

function deleteFaxDispatch($dev_id){
	$lineas = array();
	$sRutaArchivo='/var/spool/hylafax/etc/FaxDispatch';
	if(file_exists($sRutaArchivo) && filesize($sRutaArchivo)!=0){
		foreach (file($sRutaArchivo) as $sLinea) {
			// Remover el fax anterior
			$cadena="  ttyIAX".$dev_id."\) SENDTO";
			if (!preg_match("/$cadena/", $sLinea)) {
				$lineas[] = $sLinea;
			}
		}
		file_put_contents($sRutaArchivo, $lineas);
	}
}

function writeIaxmodemConfig($tupla)
{
    /* iaxmodem configuration */
    $sContenido = <<<IAXMODEM_CONFIG
device          /dev/ttyIAX{$tupla['dev_id']}
owner           uucp:uucp
mode            660
port            {$tupla['port']}
refresh         300
server          127.0.0.1
peername        {$tupla['extension']}
secret          {$tupla['secret']}
cidname         {$tupla['clid_name']}
cidnumber       {$tupla['clid_number']}
codec           slinear

IAXMODEM_CONFIG;
    $sRutaArchivo = CONFIGDIR_IAXMODEM.'/iaxmodem-cfg.ttyIAX'.$tupla['dev_id'];
    file_put_contents($sRutaArchivo, $sContenido);
    chmod($sRutaArchivo, 0644);
}

function writeHylafaxConfig($tupla)
{
    /* hylafax configuration */
    $sContenido = <<<HYLAFAX_CONFIG
CountryCode:            {$tupla['country_code']}
AreaCode:               {$tupla['area_code']}
FAXNumber:              {$tupla['clid_number']}
LongDistancePrefix:     1
InternationalPrefix:    011
DialStringRules:        etc/dialrules
ServerTracing:          0xFFF
SessionTracing:         0xFFF
RecvFileMode:           0600
LogFileMode:            0600
DeviceMode:             0600
RingsBeforeAnswer:      1
SpeakerVolume:          off
GettyArgs:              "-h %l dx_%s"
LocalIdentifier:        "{$tupla['clid_name']}"
TagLineFont:            etc/lutRS18.pcf
TagLineFormat:          "From %%l|%c|Page %%P of %%T"
MaxRecvPages:           200
#
#
# Modem-related stuff: should reflect modem command interface
# and hardware connection/cabling (e.g. flow control).
#
ModemType:              Class1          # use this to supply a hint

#
# Enabling this will use the hfaxd-protocol to set Caller*ID
#
#ModemSetOriginCmd:     AT+VSID="%s","%d"

#
# If "glare" during initialization becomes a problem then take
# the modem off-hook during initialization, and then place it
# back on-hook when done.
#
#ModemResetCmds:        "ATH1\\nAT+VCID=1"       # enables CallID display
#ModemReadyCmds:        ATH0


Class1AdaptRecvCmd:     AT+FAR=1
Class1TMConnectDelay:   400             # counteract quick CONNECT response

Class1RMQueryCmd:       "!24,48,72,96"  # enable this to disable V.17

#
# You'll likely want Caller*ID display (also displays DID) enabled.
#
ModemResetCmds:         AT+VCID=1       # enables CallID display

#
# If you are "missing" Caller*ID data on some calls (but not all)
# and if you do not have adequate glare protection you may want to
# not answer based on RINGs, but rather enable the CallIDAnswerLength
# for NDID, disable AT+VCID=1 and do this:
#
#RingsBeforeAnswer: 0
#ModemRingResponse: AT+VRID=1

CallIDPattern:          "NMBR="
CallIDPattern:          "NAME="
CallIDPattern:          "ANID="
CallIDPattern:          "NDID="
#CallIDAnswerLength:    4
# Uncomment these if you really want them, but you probably don't.
#CallIDPattern:          "DATE="
#CallIDPattern:          "TIME="
FaxRcvdCmd:              bin/faxrcvd.php
UseJobTSI:               true

HYLAFAX_CONFIG;
    $sRutaArchivo = CONFIGDIR_HYLAFAX.'/config.ttyIAX'.$tupla['dev_id'];
    file_put_contents($sRutaArchivo, $sContenido);
    chown($sRutaArchivo, 'uucp'); chgrp($sRutaArchivo, 'uucp');
    chmod($sRutaArchivo, 0644);
}

/* Report the list of hosts that are allowed to send fax through this machine */
function action_getFaxHosts($opt)
{
    return (readfile(CONFIGDIR_HYLAFAX.'/'.HYLAFAX_ALLOWED_HOSTS) !== FALSE);
}

/* Set the list of hosts that are allowed to send fax. */
function action_setFaxHosts($opt)
{
    // These hosts are always required.
    $listaHosts = array('localhost', '127.0.0.1');

    foreach ($opt[1] as $sNewHost) if (!in_array($sNewHost, $listaHosts)) {
        if (!preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/', $sNewHost))
            error_exit("Invalid host IP: $sNewHost\n");
        $listaHosts[] = $sNewHost;
    }
    return (file_put_contents(CONFIGDIR_HYLAFAX.'/'.HYLAFAX_ALLOWED_HOSTS, implode("\n", $listaHosts)."\n") !== FALSE);
}

/* Refresh FaxMaster setting from /var/www/db/settings.db */
function action_refreshFaxMaster($opt)
{
    // Read current value of faxmaster
    try {
        $conn = new PDO('sqlite:/var/www/db/settings.db');

        // Read all the fax configuration information
        $sth = $conn->query('SELECT value FROM settings WHERE key = "fax_master"');
        $sFaxMaster = $sth->fetchColumn();
    } catch (PDOException $e) {
        fprintf(STDERR, "ERR: failed to query fax master - %s\n", $e->getMessage());
        return FALSE;
    }

    // Add content to /etc/postfix/virtual
    $lineas = array();
    foreach (file('/etc/postfix/virtual') as $s) {
        if (strpos($s, 'FaxMaster') !== 0) $lineas[] = $s;
    }
    if ($sFaxMaster !== FALSE) $lineas[] = "FaxMaster\t$sFaxMaster\n";
    if (file_put_contents('/etc/postfix/virtual', $lineas) === FALSE)
        return FALSE;

    // Update map
    $retval = NULL;
    system('/usr/sbin/postmap /etc/postfix/virtual', $retval);
    return ($retval == 0);
}

function createDirFax($domain){
	$path="/var/www/faxes";
	$exito=true;
	$arrDir=array("$path/$domain","$path/$domain/sent","$path/$domain/recvd");

	if(!is_dir($path)){
		if(mkdir($path)){
			exec("chown asterisk.asterisk $path",$output,$retval);
			exec("chmod 755 $path",$output,$retval);
		}else{
			fprintf(STDERR, "ERR: failed to create fax directory");
			return false;
		}
	}

	if(is_dir("$path/$domain")){
		$date=date("YMd_His");
		rename("$path/$domain","$path/$domain"."_".$date);
	}

	foreach($arrDir as $dir){
		if(mkdir($dir)){
			exec("chown asterisk.uucp $dir ",$output,$retval);
			exec("chmod 775 $dir",$output,$retval);
		}else{
			fprintf(STDERR, "ERR: failed to create fax directory - %s\n", $output[0]);
			$exito=false;
			break;
		}
	}

	if(!$exito){
		if(is_dir("$path/$domain"))
			rmdir("$path/$domain");
		if(is_dir("$path/$domain/sent"))
			rmdir("$path/$domain/sent");
		if(is_dir("$path/$domain/recvd"))
			rmdir("$path/$domain/recvd");
		return false;
	}else{
		return true;
	}
}

?>